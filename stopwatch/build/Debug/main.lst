                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _setData_PARM_2
                                     12 	.globl _main
                                     13 	.globl _buttonsCheck
                                     14 	.globl _DelayMS
                                     15 	.globl _delayFOR
                                     16 	.globl _T0_int
                                     17 	.globl _T0init
                                     18 	.globl _setDigits
                                     19 	.globl _nextColumn
                                     20 	.globl _setData
                                     21 	.globl _CY
                                     22 	.globl _AC
                                     23 	.globl _F0
                                     24 	.globl _RS1
                                     25 	.globl _RS0
                                     26 	.globl _OV
                                     27 	.globl _F1
                                     28 	.globl _P
                                     29 	.globl _PS
                                     30 	.globl _PT1
                                     31 	.globl _PX1
                                     32 	.globl _PT0
                                     33 	.globl _PX0
                                     34 	.globl _RD
                                     35 	.globl _WR
                                     36 	.globl _T1
                                     37 	.globl _T0
                                     38 	.globl _INT1
                                     39 	.globl _INT0
                                     40 	.globl _TXD
                                     41 	.globl _RXD
                                     42 	.globl _P3_7
                                     43 	.globl _P3_6
                                     44 	.globl _P3_5
                                     45 	.globl _P3_4
                                     46 	.globl _P3_3
                                     47 	.globl _P3_2
                                     48 	.globl _P3_1
                                     49 	.globl _P3_0
                                     50 	.globl _EA
                                     51 	.globl _ES
                                     52 	.globl _ET1
                                     53 	.globl _EX1
                                     54 	.globl _ET0
                                     55 	.globl _EX0
                                     56 	.globl _P2_7
                                     57 	.globl _P2_6
                                     58 	.globl _P2_5
                                     59 	.globl _P2_4
                                     60 	.globl _P2_3
                                     61 	.globl _P2_2
                                     62 	.globl _P2_1
                                     63 	.globl _P2_0
                                     64 	.globl _SM0
                                     65 	.globl _SM1
                                     66 	.globl _SM2
                                     67 	.globl _REN
                                     68 	.globl _TB8
                                     69 	.globl _RB8
                                     70 	.globl _TI
                                     71 	.globl _RI
                                     72 	.globl _P1_7
                                     73 	.globl _P1_6
                                     74 	.globl _P1_5
                                     75 	.globl _P1_4
                                     76 	.globl _P1_3
                                     77 	.globl _P1_2
                                     78 	.globl _P1_1
                                     79 	.globl _P1_0
                                     80 	.globl _TF1
                                     81 	.globl _TR1
                                     82 	.globl _TF0
                                     83 	.globl _TR0
                                     84 	.globl _IE1
                                     85 	.globl _IT1
                                     86 	.globl _IE0
                                     87 	.globl _IT0
                                     88 	.globl _P0_7
                                     89 	.globl _P0_6
                                     90 	.globl _P0_5
                                     91 	.globl _P0_4
                                     92 	.globl _P0_3
                                     93 	.globl _P0_2
                                     94 	.globl _P0_1
                                     95 	.globl _P0_0
                                     96 	.globl _B
                                     97 	.globl _ACC
                                     98 	.globl _PSW
                                     99 	.globl _IP
                                    100 	.globl _P3
                                    101 	.globl _IE
                                    102 	.globl _P2
                                    103 	.globl _SBUF
                                    104 	.globl _SCON
                                    105 	.globl _P1
                                    106 	.globl _TH1
                                    107 	.globl _TH0
                                    108 	.globl _TL1
                                    109 	.globl _TL0
                                    110 	.globl _TMOD
                                    111 	.globl _TCON
                                    112 	.globl _PCON
                                    113 	.globl _DPH
                                    114 	.globl _DPL
                                    115 	.globl _SP
                                    116 	.globl _P0
                                    117 	.globl _second
                                    118 	.globl _first
                                    119 	.globl _timeHour
                                    120 	.globl _timeMin
                                    121 	.globl _timeSec
                                    122 	.globl _time10ms
                                    123 	.globl _ptrColumn
                                    124 	.globl _mode
                                    125 	.globl _started
                                    126 ;--------------------------------------------------------
                                    127 ; special function registers
                                    128 ;--------------------------------------------------------
                                    129 	.area RSEG    (ABS,DATA)
      000000                        130 	.org 0x0000
                           000080   131 _P0	=	0x0080
                           000081   132 _SP	=	0x0081
                           000082   133 _DPL	=	0x0082
                           000083   134 _DPH	=	0x0083
                           000087   135 _PCON	=	0x0087
                           000088   136 _TCON	=	0x0088
                           000089   137 _TMOD	=	0x0089
                           00008A   138 _TL0	=	0x008a
                           00008B   139 _TL1	=	0x008b
                           00008C   140 _TH0	=	0x008c
                           00008D   141 _TH1	=	0x008d
                           000090   142 _P1	=	0x0090
                           000098   143 _SCON	=	0x0098
                           000099   144 _SBUF	=	0x0099
                           0000A0   145 _P2	=	0x00a0
                           0000A8   146 _IE	=	0x00a8
                           0000B0   147 _P3	=	0x00b0
                           0000B8   148 _IP	=	0x00b8
                           0000D0   149 _PSW	=	0x00d0
                           0000E0   150 _ACC	=	0x00e0
                           0000F0   151 _B	=	0x00f0
                                    152 ;--------------------------------------------------------
                                    153 ; special function bits
                                    154 ;--------------------------------------------------------
                                    155 	.area RSEG    (ABS,DATA)
      000000                        156 	.org 0x0000
                           000080   157 _P0_0	=	0x0080
                           000081   158 _P0_1	=	0x0081
                           000082   159 _P0_2	=	0x0082
                           000083   160 _P0_3	=	0x0083
                           000084   161 _P0_4	=	0x0084
                           000085   162 _P0_5	=	0x0085
                           000086   163 _P0_6	=	0x0086
                           000087   164 _P0_7	=	0x0087
                           000088   165 _IT0	=	0x0088
                           000089   166 _IE0	=	0x0089
                           00008A   167 _IT1	=	0x008a
                           00008B   168 _IE1	=	0x008b
                           00008C   169 _TR0	=	0x008c
                           00008D   170 _TF0	=	0x008d
                           00008E   171 _TR1	=	0x008e
                           00008F   172 _TF1	=	0x008f
                           000090   173 _P1_0	=	0x0090
                           000091   174 _P1_1	=	0x0091
                           000092   175 _P1_2	=	0x0092
                           000093   176 _P1_3	=	0x0093
                           000094   177 _P1_4	=	0x0094
                           000095   178 _P1_5	=	0x0095
                           000096   179 _P1_6	=	0x0096
                           000097   180 _P1_7	=	0x0097
                           000098   181 _RI	=	0x0098
                           000099   182 _TI	=	0x0099
                           00009A   183 _RB8	=	0x009a
                           00009B   184 _TB8	=	0x009b
                           00009C   185 _REN	=	0x009c
                           00009D   186 _SM2	=	0x009d
                           00009E   187 _SM1	=	0x009e
                           00009F   188 _SM0	=	0x009f
                           0000A0   189 _P2_0	=	0x00a0
                           0000A1   190 _P2_1	=	0x00a1
                           0000A2   191 _P2_2	=	0x00a2
                           0000A3   192 _P2_3	=	0x00a3
                           0000A4   193 _P2_4	=	0x00a4
                           0000A5   194 _P2_5	=	0x00a5
                           0000A6   195 _P2_6	=	0x00a6
                           0000A7   196 _P2_7	=	0x00a7
                           0000A8   197 _EX0	=	0x00a8
                           0000A9   198 _ET0	=	0x00a9
                           0000AA   199 _EX1	=	0x00aa
                           0000AB   200 _ET1	=	0x00ab
                           0000AC   201 _ES	=	0x00ac
                           0000AF   202 _EA	=	0x00af
                           0000B0   203 _P3_0	=	0x00b0
                           0000B1   204 _P3_1	=	0x00b1
                           0000B2   205 _P3_2	=	0x00b2
                           0000B3   206 _P3_3	=	0x00b3
                           0000B4   207 _P3_4	=	0x00b4
                           0000B5   208 _P3_5	=	0x00b5
                           0000B6   209 _P3_6	=	0x00b6
                           0000B7   210 _P3_7	=	0x00b7
                           0000B0   211 _RXD	=	0x00b0
                           0000B1   212 _TXD	=	0x00b1
                           0000B2   213 _INT0	=	0x00b2
                           0000B3   214 _INT1	=	0x00b3
                           0000B4   215 _T0	=	0x00b4
                           0000B5   216 _T1	=	0x00b5
                           0000B6   217 _WR	=	0x00b6
                           0000B7   218 _RD	=	0x00b7
                           0000B8   219 _PX0	=	0x00b8
                           0000B9   220 _PT0	=	0x00b9
                           0000BA   221 _PX1	=	0x00ba
                           0000BB   222 _PT1	=	0x00bb
                           0000BC   223 _PS	=	0x00bc
                           0000D0   224 _P	=	0x00d0
                           0000D1   225 _F1	=	0x00d1
                           0000D2   226 _OV	=	0x00d2
                           0000D3   227 _RS0	=	0x00d3
                           0000D4   228 _RS1	=	0x00d4
                           0000D5   229 _F0	=	0x00d5
                           0000D6   230 _AC	=	0x00d6
                           0000D7   231 _CY	=	0x00d7
                                    232 ;--------------------------------------------------------
                                    233 ; overlayable register banks
                                    234 ;--------------------------------------------------------
                                    235 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        236 	.ds 8
                                    237 ;--------------------------------------------------------
                                    238 ; overlayable bit register bank
                                    239 ;--------------------------------------------------------
                                    240 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        241 bits:
      000000                        242 	.ds 1
                           008000   243 	b0 = bits[0]
                           008100   244 	b1 = bits[1]
                           008200   245 	b2 = bits[2]
                           008300   246 	b3 = bits[3]
                           008400   247 	b4 = bits[4]
                           008500   248 	b5 = bits[5]
                           008600   249 	b6 = bits[6]
                           008700   250 	b7 = bits[7]
                                    251 ;--------------------------------------------------------
                                    252 ; internal ram data
                                    253 ;--------------------------------------------------------
                                    254 	.area DSEG    (DATA)
      000000                        255 _started::
      000000                        256 	.ds 1
      000001                        257 _mode::
      000001                        258 	.ds 1
      000002                        259 _ptrColumn::
      000002                        260 	.ds 1
      000003                        261 _time10ms::
      000003                        262 	.ds 1
      000004                        263 _timeSec::
      000004                        264 	.ds 1
      000005                        265 _timeMin::
      000005                        266 	.ds 1
      000006                        267 _timeHour::
      000006                        268 	.ds 1
      000007                        269 _first::
      000007                        270 	.ds 3
      00000A                        271 _second::
      00000A                        272 	.ds 3
                                    273 ;--------------------------------------------------------
                                    274 ; overlayable items in internal ram 
                                    275 ;--------------------------------------------------------
                                    276 	.area	OSEG    (OVR,DATA)
      000000                        277 _setData_PARM_2:
      000000                        278 	.ds 3
                                    279 	.area	OSEG    (OVR,DATA)
                                    280 ;--------------------------------------------------------
                                    281 ; Stack segment in internal ram 
                                    282 ;--------------------------------------------------------
                                    283 	.area	SSEG
      000000                        284 __start__stack:
      000000                        285 	.ds	1
                                    286 
                                    287 ;--------------------------------------------------------
                                    288 ; indirectly addressable internal ram data
                                    289 ;--------------------------------------------------------
                                    290 	.area ISEG    (DATA)
                                    291 ;--------------------------------------------------------
                                    292 ; absolute internal ram data
                                    293 ;--------------------------------------------------------
                                    294 	.area IABS    (ABS,DATA)
                                    295 	.area IABS    (ABS,DATA)
                                    296 ;--------------------------------------------------------
                                    297 ; bit data
                                    298 ;--------------------------------------------------------
                                    299 	.area BSEG    (BIT)
                                    300 ;--------------------------------------------------------
                                    301 ; paged external ram data
                                    302 ;--------------------------------------------------------
                                    303 	.area PSEG    (PAG,XDATA)
                                    304 ;--------------------------------------------------------
                                    305 ; external ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area XSEG    (XDATA)
                                    308 ;--------------------------------------------------------
                                    309 ; absolute external ram data
                                    310 ;--------------------------------------------------------
                                    311 	.area XABS    (ABS,XDATA)
                                    312 ;--------------------------------------------------------
                                    313 ; external initialized ram data
                                    314 ;--------------------------------------------------------
                                    315 	.area XISEG   (XDATA)
                                    316 	.area HOME    (CODE)
                                    317 	.area GSINIT0 (CODE)
                                    318 	.area GSINIT1 (CODE)
                                    319 	.area GSINIT2 (CODE)
                                    320 	.area GSINIT3 (CODE)
                                    321 	.area GSINIT4 (CODE)
                                    322 	.area GSINIT5 (CODE)
                                    323 	.area GSINIT  (CODE)
                                    324 	.area GSFINAL (CODE)
                                    325 	.area CSEG    (CODE)
                                    326 ;--------------------------------------------------------
                                    327 ; interrupt vector 
                                    328 ;--------------------------------------------------------
                                    329 	.area HOME    (CODE)
      000000                        330 __interrupt_vect:
      000000 02r00r00         [24]  331 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  332 	reti
      000004                        333 	.ds	7
      00000B 02r03rAD         [24]  334 	ljmp	_T0_int
                                    335 ;--------------------------------------------------------
                                    336 ; global & static initialisations
                                    337 ;--------------------------------------------------------
                                    338 	.area HOME    (CODE)
                                    339 	.area GSINIT  (CODE)
                                    340 	.area GSFINAL (CODE)
                                    341 	.area GSINIT  (CODE)
                                    342 	.globl __sdcc_gsinit_startup
                                    343 	.globl __sdcc_program_startup
                                    344 	.globl __start__stack
                                    345 	.globl __mcs51_genXINIT
                                    346 	.globl __mcs51_genXRAMCLEAR
                                    347 	.globl __mcs51_genRAMCLEAR
                                    348 ;	.\src\main.c:14: unsigned char started = 0;
      000000 75*00 00         [24]  349 	mov	_started,#0x00
                                    350 ;	.\src\main.c:21: unsigned char mode = 1;
      000003 75*01 01         [24]  351 	mov	_mode,#0x01
                                    352 ;	.\src\main.c:24: unsigned char ptrColumn = 0;
      000006 75*02 00         [24]  353 	mov	_ptrColumn,#0x00
                                    354 ;	.\src\main.c:27: unsigned char time10ms = 0;
      000009 75*03 00         [24]  355 	mov	_time10ms,#0x00
                                    356 ;	.\src\main.c:29: unsigned char timeSec = 0;
      00000C 75*04 00         [24]  357 	mov	_timeSec,#0x00
                                    358 ;	.\src\main.c:31: unsigned char timeMin = 0;
      00000F 75*05 00         [24]  359 	mov	_timeMin,#0x00
                                    360 ;	.\src\main.c:33: unsigned char timeHour = 0;
      000012 75*06 00         [24]  361 	mov	_timeHour,#0x00
                                    362 	.area GSFINAL (CODE)
      000000 02r00r0E         [24]  363 	ljmp	__sdcc_program_startup
                                    364 ;--------------------------------------------------------
                                    365 ; Home
                                    366 ;--------------------------------------------------------
                                    367 	.area HOME    (CODE)
                                    368 	.area HOME    (CODE)
      00000E                        369 __sdcc_program_startup:
      00000E 02r04rA0         [24]  370 	ljmp	_main
                                    371 ;	return from main will return to caller
                                    372 ;--------------------------------------------------------
                                    373 ; code
                                    374 ;--------------------------------------------------------
                                    375 	.area CSEG    (CODE)
                                    376 ;------------------------------------------------------------
                                    377 ;Allocation info for local variables in function 'setData'
                                    378 ;------------------------------------------------------------
                                    379 ;array                     Allocated with name '_setData_PARM_2'
                                    380 ;digit                     Allocated to registers r7 
                                    381 ;------------------------------------------------------------
                                    382 ;	.\src\main.c:40: void setData(unsigned char digit, unsigned char *array)
                                    383 ;	-----------------------------------------
                                    384 ;	 function setData
                                    385 ;	-----------------------------------------
      000000                        386 _setData:
                           000007   387 	ar7 = 0x07
                           000006   388 	ar6 = 0x06
                           000005   389 	ar5 = 0x05
                           000004   390 	ar4 = 0x04
                           000003   391 	ar3 = 0x03
                           000002   392 	ar2 = 0x02
                           000001   393 	ar1 = 0x01
                           000000   394 	ar0 = 0x00
                                    395 ;	.\src\main.c:42: switch(digit)
      000000 E5 82            [12]  396 	mov	a,dpl
      000002 FF               [12]  397 	mov	r7,a
      000003 24 F6            [12]  398 	add	a,#0xff - 0x09
      000005 50 01            [24]  399 	jnc	00118$
      000007 22               [24]  400 	ret
      000008                        401 00118$:
      000008 EF               [12]  402 	mov	a,r7
      000009 2F               [12]  403 	add	a,r7
      00000A 2F               [12]  404 	add	a,r7
      00000B 90r00r0F         [24]  405 	mov	dptr,#00119$
      00000E 73               [24]  406 	jmp	@a+dptr
      00000F                        407 00119$:
      00000F 02r00r2D         [24]  408 	ljmp	00101$
      000012 02r00r61         [24]  409 	ljmp	00102$
      000015 02r00r97         [24]  410 	ljmp	00103$
      000018 02r00rCE         [24]  411 	ljmp	00104$
      00001B 02r01r04         [24]  412 	ljmp	00105$
      00001E 02r01r3A         [24]  413 	ljmp	00106$
      000021 02r01r71         [24]  414 	ljmp	00107$
      000024 02r01rA6         [24]  415 	ljmp	00108$
      000027 02r01rDD         [24]  416 	ljmp	00109$
      00002A 02r02r11         [24]  417 	ljmp	00110$
                                    418 ;	.\src\main.c:45: case 0:
      00002D                        419 00101$:
                                    420 ;	.\src\main.c:47: array[0] = 0x00;
      00002D AD*00            [24]  421 	mov	r5,_setData_PARM_2
      00002F AE*01            [24]  422 	mov	r6,(_setData_PARM_2 + 1)
      000031 AF*02            [24]  423 	mov	r7,(_setData_PARM_2 + 2)
      000033 8D 82            [24]  424 	mov	dpl,r5
      000035 8E 83            [24]  425 	mov	dph,r6
      000037 8F F0            [24]  426 	mov	b,r7
      000039 E4               [12]  427 	clr	a
      00003A 12r00r00         [24]  428 	lcall	__gptrput
                                    429 ;	.\src\main.c:49: array[1] = 0x0E;
      00003D 04               [12]  430 	inc	a
      00003E 2D               [12]  431 	add	a,r5
      00003F FA               [12]  432 	mov	r2,a
      000040 E4               [12]  433 	clr	a
      000041 3E               [12]  434 	addc	a,r6
      000042 FB               [12]  435 	mov	r3,a
      000043 8F 04            [24]  436 	mov	ar4,r7
      000045 8A 82            [24]  437 	mov	dpl,r2
      000047 8B 83            [24]  438 	mov	dph,r3
      000049 8C F0            [24]  439 	mov	b,r4
      00004B 74 0E            [12]  440 	mov	a,#0x0e
      00004D 12r00r00         [24]  441 	lcall	__gptrput
                                    442 ;	.\src\main.c:51: array[2] = 0x00;
      000050 74 02            [12]  443 	mov	a,#0x02
      000052 2D               [12]  444 	add	a,r5
      000053 FD               [12]  445 	mov	r5,a
      000054 E4               [12]  446 	clr	a
      000055 3E               [12]  447 	addc	a,r6
      000056 FE               [12]  448 	mov	r6,a
      000057 8D 82            [24]  449 	mov	dpl,r5
      000059 8E 83            [24]  450 	mov	dph,r6
      00005B 8F F0            [24]  451 	mov	b,r7
      00005D E4               [12]  452 	clr	a
                                    453 ;	.\src\main.c:56: break;
      00005E 02r00r00         [24]  454 	ljmp	__gptrput
                                    455 ;	.\src\main.c:57: case 1:
      000061                        456 00102$:
                                    457 ;	.\src\main.c:58: array[0] = 0x1B;
      000061 AD*00            [24]  458 	mov	r5,_setData_PARM_2
      000063 AE*01            [24]  459 	mov	r6,(_setData_PARM_2 + 1)
      000065 AF*02            [24]  460 	mov	r7,(_setData_PARM_2 + 2)
      000067 8D 82            [24]  461 	mov	dpl,r5
      000069 8E 83            [24]  462 	mov	dph,r6
      00006B 8F F0            [24]  463 	mov	b,r7
      00006D 74 1B            [12]  464 	mov	a,#0x1b
      00006F 12r00r00         [24]  465 	lcall	__gptrput
                                    466 ;	.\src\main.c:59: array[1] = 0x1D;
      000072 74 01            [12]  467 	mov	a,#0x01
      000074 2D               [12]  468 	add	a,r5
      000075 FA               [12]  469 	mov	r2,a
      000076 E4               [12]  470 	clr	a
      000077 3E               [12]  471 	addc	a,r6
      000078 FB               [12]  472 	mov	r3,a
      000079 8F 04            [24]  473 	mov	ar4,r7
      00007B 8A 82            [24]  474 	mov	dpl,r2
      00007D 8B 83            [24]  475 	mov	dph,r3
      00007F 8C F0            [24]  476 	mov	b,r4
      000081 74 1D            [12]  477 	mov	a,#0x1d
      000083 12r00r00         [24]  478 	lcall	__gptrput
                                    479 ;	.\src\main.c:60: array[2] = 0x00;
      000086 74 02            [12]  480 	mov	a,#0x02
      000088 2D               [12]  481 	add	a,r5
      000089 FD               [12]  482 	mov	r5,a
      00008A E4               [12]  483 	clr	a
      00008B 3E               [12]  484 	addc	a,r6
      00008C FE               [12]  485 	mov	r6,a
      00008D 8D 82            [24]  486 	mov	dpl,r5
      00008F 8E 83            [24]  487 	mov	dph,r6
      000091 8F F0            [24]  488 	mov	b,r7
      000093 E4               [12]  489 	clr	a
                                    490 ;	.\src\main.c:61: break;
      000094 02r00r00         [24]  491 	ljmp	__gptrput
                                    492 ;	.\src\main.c:62: case 2:
      000097                        493 00103$:
                                    494 ;	.\src\main.c:63: array[0] = 0x04;
      000097 AD*00            [24]  495 	mov	r5,_setData_PARM_2
      000099 AE*01            [24]  496 	mov	r6,(_setData_PARM_2 + 1)
      00009B AF*02            [24]  497 	mov	r7,(_setData_PARM_2 + 2)
      00009D 8D 82            [24]  498 	mov	dpl,r5
      00009F 8E 83            [24]  499 	mov	dph,r6
      0000A1 8F F0            [24]  500 	mov	b,r7
      0000A3 74 04            [12]  501 	mov	a,#0x04
      0000A5 12r00r00         [24]  502 	lcall	__gptrput
                                    503 ;	.\src\main.c:64: array[1] = 0x0A;
      0000A8 74 01            [12]  504 	mov	a,#0x01
      0000AA 2D               [12]  505 	add	a,r5
      0000AB FA               [12]  506 	mov	r2,a
      0000AC E4               [12]  507 	clr	a
      0000AD 3E               [12]  508 	addc	a,r6
      0000AE FB               [12]  509 	mov	r3,a
      0000AF 8F 04            [24]  510 	mov	ar4,r7
      0000B1 8A 82            [24]  511 	mov	dpl,r2
      0000B3 8B 83            [24]  512 	mov	dph,r3
      0000B5 8C F0            [24]  513 	mov	b,r4
      0000B7 74 0A            [12]  514 	mov	a,#0x0a
      0000B9 12r00r00         [24]  515 	lcall	__gptrput
                                    516 ;	.\src\main.c:65: array[2] = 0x08;
      0000BC 74 02            [12]  517 	mov	a,#0x02
      0000BE 2D               [12]  518 	add	a,r5
      0000BF FD               [12]  519 	mov	r5,a
      0000C0 E4               [12]  520 	clr	a
      0000C1 3E               [12]  521 	addc	a,r6
      0000C2 FE               [12]  522 	mov	r6,a
      0000C3 8D 82            [24]  523 	mov	dpl,r5
      0000C5 8E 83            [24]  524 	mov	dph,r6
      0000C7 8F F0            [24]  525 	mov	b,r7
      0000C9 74 08            [12]  526 	mov	a,#0x08
                                    527 ;	.\src\main.c:66: break;
      0000CB 02r00r00         [24]  528 	ljmp	__gptrput
                                    529 ;	.\src\main.c:67: case 3:
      0000CE                        530 00104$:
                                    531 ;	.\src\main.c:68: array[0] = 0x0A;
      0000CE AD*00            [24]  532 	mov	r5,_setData_PARM_2
      0000D0 AE*01            [24]  533 	mov	r6,(_setData_PARM_2 + 1)
      0000D2 AF*02            [24]  534 	mov	r7,(_setData_PARM_2 + 2)
      0000D4 8D 82            [24]  535 	mov	dpl,r5
      0000D6 8E 83            [24]  536 	mov	dph,r6
      0000D8 8F F0            [24]  537 	mov	b,r7
      0000DA 74 0A            [12]  538 	mov	a,#0x0a
      0000DC 12r00r00         [24]  539 	lcall	__gptrput
                                    540 ;	.\src\main.c:69: array[1] = 0x0A;
      0000DF 74 01            [12]  541 	mov	a,#0x01
      0000E1 2D               [12]  542 	add	a,r5
      0000E2 FA               [12]  543 	mov	r2,a
      0000E3 E4               [12]  544 	clr	a
      0000E4 3E               [12]  545 	addc	a,r6
      0000E5 FB               [12]  546 	mov	r3,a
      0000E6 8F 04            [24]  547 	mov	ar4,r7
      0000E8 8A 82            [24]  548 	mov	dpl,r2
      0000EA 8B 83            [24]  549 	mov	dph,r3
      0000EC 8C F0            [24]  550 	mov	b,r4
      0000EE 74 0A            [12]  551 	mov	a,#0x0a
      0000F0 12r00r00         [24]  552 	lcall	__gptrput
                                    553 ;	.\src\main.c:70: array[2] = 0x00;
      0000F3 74 02            [12]  554 	mov	a,#0x02
      0000F5 2D               [12]  555 	add	a,r5
      0000F6 FD               [12]  556 	mov	r5,a
      0000F7 E4               [12]  557 	clr	a
      0000F8 3E               [12]  558 	addc	a,r6
      0000F9 FE               [12]  559 	mov	r6,a
      0000FA 8D 82            [24]  560 	mov	dpl,r5
      0000FC 8E 83            [24]  561 	mov	dph,r6
      0000FE 8F F0            [24]  562 	mov	b,r7
      000100 E4               [12]  563 	clr	a
                                    564 ;	.\src\main.c:71: break;
      000101 02r00r00         [24]  565 	ljmp	__gptrput
                                    566 ;	.\src\main.c:72: case 4:
      000104                        567 00105$:
                                    568 ;	.\src\main.c:73: array[0] = 0x18;
      000104 AD*00            [24]  569 	mov	r5,_setData_PARM_2
      000106 AE*01            [24]  570 	mov	r6,(_setData_PARM_2 + 1)
      000108 AF*02            [24]  571 	mov	r7,(_setData_PARM_2 + 2)
      00010A 8D 82            [24]  572 	mov	dpl,r5
      00010C 8E 83            [24]  573 	mov	dph,r6
      00010E 8F F0            [24]  574 	mov	b,r7
      000110 74 18            [12]  575 	mov	a,#0x18
      000112 12r00r00         [24]  576 	lcall	__gptrput
                                    577 ;	.\src\main.c:74: array[1] = 0x1B;
      000115 74 01            [12]  578 	mov	a,#0x01
      000117 2D               [12]  579 	add	a,r5
      000118 FA               [12]  580 	mov	r2,a
      000119 E4               [12]  581 	clr	a
      00011A 3E               [12]  582 	addc	a,r6
      00011B FB               [12]  583 	mov	r3,a
      00011C 8F 04            [24]  584 	mov	ar4,r7
      00011E 8A 82            [24]  585 	mov	dpl,r2
      000120 8B 83            [24]  586 	mov	dph,r3
      000122 8C F0            [24]  587 	mov	b,r4
      000124 74 1B            [12]  588 	mov	a,#0x1b
      000126 12r00r00         [24]  589 	lcall	__gptrput
                                    590 ;	.\src\main.c:75: array[2] = 0x00;
      000129 74 02            [12]  591 	mov	a,#0x02
      00012B 2D               [12]  592 	add	a,r5
      00012C FD               [12]  593 	mov	r5,a
      00012D E4               [12]  594 	clr	a
      00012E 3E               [12]  595 	addc	a,r6
      00012F FE               [12]  596 	mov	r6,a
      000130 8D 82            [24]  597 	mov	dpl,r5
      000132 8E 83            [24]  598 	mov	dph,r6
      000134 8F F0            [24]  599 	mov	b,r7
      000136 E4               [12]  600 	clr	a
                                    601 ;	.\src\main.c:76: break;
      000137 02r00r00         [24]  602 	ljmp	__gptrput
                                    603 ;	.\src\main.c:77: case 5:
      00013A                        604 00106$:
                                    605 ;	.\src\main.c:78: array[0] = 0x08;
      00013A AD*00            [24]  606 	mov	r5,_setData_PARM_2
      00013C AE*01            [24]  607 	mov	r6,(_setData_PARM_2 + 1)
      00013E AF*02            [24]  608 	mov	r7,(_setData_PARM_2 + 2)
      000140 8D 82            [24]  609 	mov	dpl,r5
      000142 8E 83            [24]  610 	mov	dph,r6
      000144 8F F0            [24]  611 	mov	b,r7
      000146 74 08            [12]  612 	mov	a,#0x08
      000148 12r00r00         [24]  613 	lcall	__gptrput
                                    614 ;	.\src\main.c:79: array[1] = 0x0A;
      00014B 74 01            [12]  615 	mov	a,#0x01
      00014D 2D               [12]  616 	add	a,r5
      00014E FA               [12]  617 	mov	r2,a
      00014F E4               [12]  618 	clr	a
      000150 3E               [12]  619 	addc	a,r6
      000151 FB               [12]  620 	mov	r3,a
      000152 8F 04            [24]  621 	mov	ar4,r7
      000154 8A 82            [24]  622 	mov	dpl,r2
      000156 8B 83            [24]  623 	mov	dph,r3
      000158 8C F0            [24]  624 	mov	b,r4
      00015A 74 0A            [12]  625 	mov	a,#0x0a
      00015C 12r00r00         [24]  626 	lcall	__gptrput
                                    627 ;	.\src\main.c:80: array[2] = 0x02;
      00015F 74 02            [12]  628 	mov	a,#0x02
      000161 2D               [12]  629 	add	a,r5
      000162 FD               [12]  630 	mov	r5,a
      000163 E4               [12]  631 	clr	a
      000164 3E               [12]  632 	addc	a,r6
      000165 FE               [12]  633 	mov	r6,a
      000166 8D 82            [24]  634 	mov	dpl,r5
      000168 8E 83            [24]  635 	mov	dph,r6
      00016A 8F F0            [24]  636 	mov	b,r7
      00016C 74 02            [12]  637 	mov	a,#0x02
                                    638 ;	.\src\main.c:81: break;
      00016E 02r00r00         [24]  639 	ljmp	__gptrput
                                    640 ;	.\src\main.c:82: case 6:
      000171                        641 00107$:
                                    642 ;	.\src\main.c:83: array[0] = 0x00;
      000171 AD*00            [24]  643 	mov	r5,_setData_PARM_2
      000173 AE*01            [24]  644 	mov	r6,(_setData_PARM_2 + 1)
      000175 AF*02            [24]  645 	mov	r7,(_setData_PARM_2 + 2)
      000177 8D 82            [24]  646 	mov	dpl,r5
      000179 8E 83            [24]  647 	mov	dph,r6
      00017B 8F F0            [24]  648 	mov	b,r7
      00017D E4               [12]  649 	clr	a
      00017E 12r00r00         [24]  650 	lcall	__gptrput
                                    651 ;	.\src\main.c:84: array[1] = 0x0A;
      000181 04               [12]  652 	inc	a
      000182 2D               [12]  653 	add	a,r5
      000183 FA               [12]  654 	mov	r2,a
      000184 E4               [12]  655 	clr	a
      000185 3E               [12]  656 	addc	a,r6
      000186 FB               [12]  657 	mov	r3,a
      000187 8F 04            [24]  658 	mov	ar4,r7
      000189 8A 82            [24]  659 	mov	dpl,r2
      00018B 8B 83            [24]  660 	mov	dph,r3
      00018D 8C F0            [24]  661 	mov	b,r4
      00018F 74 0A            [12]  662 	mov	a,#0x0a
      000191 12r00r00         [24]  663 	lcall	__gptrput
                                    664 ;	.\src\main.c:85: array[2] = 0x02;
      000194 74 02            [12]  665 	mov	a,#0x02
      000196 2D               [12]  666 	add	a,r5
      000197 FD               [12]  667 	mov	r5,a
      000198 E4               [12]  668 	clr	a
      000199 3E               [12]  669 	addc	a,r6
      00019A FE               [12]  670 	mov	r6,a
      00019B 8D 82            [24]  671 	mov	dpl,r5
      00019D 8E 83            [24]  672 	mov	dph,r6
      00019F 8F F0            [24]  673 	mov	b,r7
      0001A1 74 02            [12]  674 	mov	a,#0x02
                                    675 ;	.\src\main.c:86: break;
      0001A3 02r00r00         [24]  676 	ljmp	__gptrput
                                    677 ;	.\src\main.c:87: case 7:
      0001A6                        678 00108$:
                                    679 ;	.\src\main.c:88: array[0] = 0x06;
      0001A6 AD*00            [24]  680 	mov	r5,_setData_PARM_2
      0001A8 AE*01            [24]  681 	mov	r6,(_setData_PARM_2 + 1)
      0001AA AF*02            [24]  682 	mov	r7,(_setData_PARM_2 + 2)
      0001AC 8D 82            [24]  683 	mov	dpl,r5
      0001AE 8E 83            [24]  684 	mov	dph,r6
      0001B0 8F F0            [24]  685 	mov	b,r7
      0001B2 74 06            [12]  686 	mov	a,#0x06
      0001B4 12r00r00         [24]  687 	lcall	__gptrput
                                    688 ;	.\src\main.c:89: array[1] = 0x1A;
      0001B7 74 01            [12]  689 	mov	a,#0x01
      0001B9 2D               [12]  690 	add	a,r5
      0001BA FA               [12]  691 	mov	r2,a
      0001BB E4               [12]  692 	clr	a
      0001BC 3E               [12]  693 	addc	a,r6
      0001BD FB               [12]  694 	mov	r3,a
      0001BE 8F 04            [24]  695 	mov	ar4,r7
      0001C0 8A 82            [24]  696 	mov	dpl,r2
      0001C2 8B 83            [24]  697 	mov	dph,r3
      0001C4 8C F0            [24]  698 	mov	b,r4
      0001C6 74 1A            [12]  699 	mov	a,#0x1a
      0001C8 12r00r00         [24]  700 	lcall	__gptrput
                                    701 ;	.\src\main.c:90: array[2] = 0x1C;
      0001CB 74 02            [12]  702 	mov	a,#0x02
      0001CD 2D               [12]  703 	add	a,r5
      0001CE FD               [12]  704 	mov	r5,a
      0001CF E4               [12]  705 	clr	a
      0001D0 3E               [12]  706 	addc	a,r6
      0001D1 FE               [12]  707 	mov	r6,a
      0001D2 8D 82            [24]  708 	mov	dpl,r5
      0001D4 8E 83            [24]  709 	mov	dph,r6
      0001D6 8F F0            [24]  710 	mov	b,r7
      0001D8 74 1C            [12]  711 	mov	a,#0x1c
                                    712 ;	.\src\main.c:91: break;
                                    713 ;	.\src\main.c:92: case 8:
      0001DA 02r00r00         [24]  714 	ljmp	__gptrput
      0001DD                        715 00109$:
                                    716 ;	.\src\main.c:93: array[0] = 0x00;
      0001DD AD*00            [24]  717 	mov	r5,_setData_PARM_2
      0001DF AE*01            [24]  718 	mov	r6,(_setData_PARM_2 + 1)
      0001E1 AF*02            [24]  719 	mov	r7,(_setData_PARM_2 + 2)
      0001E3 8D 82            [24]  720 	mov	dpl,r5
      0001E5 8E 83            [24]  721 	mov	dph,r6
      0001E7 8F F0            [24]  722 	mov	b,r7
      0001E9 E4               [12]  723 	clr	a
      0001EA 12r00r00         [24]  724 	lcall	__gptrput
                                    725 ;	.\src\main.c:94: array[1] = 0x0A;
      0001ED 04               [12]  726 	inc	a
      0001EE 2D               [12]  727 	add	a,r5
      0001EF FA               [12]  728 	mov	r2,a
      0001F0 E4               [12]  729 	clr	a
      0001F1 3E               [12]  730 	addc	a,r6
      0001F2 FB               [12]  731 	mov	r3,a
      0001F3 8F 04            [24]  732 	mov	ar4,r7
      0001F5 8A 82            [24]  733 	mov	dpl,r2
      0001F7 8B 83            [24]  734 	mov	dph,r3
      0001F9 8C F0            [24]  735 	mov	b,r4
      0001FB 74 0A            [12]  736 	mov	a,#0x0a
      0001FD 12r00r00         [24]  737 	lcall	__gptrput
                                    738 ;	.\src\main.c:95: array[2] = 0x00;
      000200 74 02            [12]  739 	mov	a,#0x02
      000202 2D               [12]  740 	add	a,r5
      000203 FD               [12]  741 	mov	r5,a
      000204 E4               [12]  742 	clr	a
      000205 3E               [12]  743 	addc	a,r6
      000206 FE               [12]  744 	mov	r6,a
      000207 8D 82            [24]  745 	mov	dpl,r5
      000209 8E 83            [24]  746 	mov	dph,r6
      00020B 8F F0            [24]  747 	mov	b,r7
      00020D E4               [12]  748 	clr	a
                                    749 ;	.\src\main.c:96: break;
                                    750 ;	.\src\main.c:97: case 9:
      00020E 02r00r00         [24]  751 	ljmp	__gptrput
      000211                        752 00110$:
                                    753 ;	.\src\main.c:98: array[0] = 0x08;
      000211 AD*00            [24]  754 	mov	r5,_setData_PARM_2
      000213 AE*01            [24]  755 	mov	r6,(_setData_PARM_2 + 1)
      000215 AF*02            [24]  756 	mov	r7,(_setData_PARM_2 + 2)
      000217 8D 82            [24]  757 	mov	dpl,r5
      000219 8E 83            [24]  758 	mov	dph,r6
      00021B 8F F0            [24]  759 	mov	b,r7
      00021D 74 08            [12]  760 	mov	a,#0x08
      00021F 12r00r00         [24]  761 	lcall	__gptrput
                                    762 ;	.\src\main.c:99: array[1] = 0x0A;
      000222 74 01            [12]  763 	mov	a,#0x01
      000224 2D               [12]  764 	add	a,r5
      000225 FA               [12]  765 	mov	r2,a
      000226 E4               [12]  766 	clr	a
      000227 3E               [12]  767 	addc	a,r6
      000228 FB               [12]  768 	mov	r3,a
      000229 8F 04            [24]  769 	mov	ar4,r7
      00022B 8A 82            [24]  770 	mov	dpl,r2
      00022D 8B 83            [24]  771 	mov	dph,r3
      00022F 8C F0            [24]  772 	mov	b,r4
      000231 74 0A            [12]  773 	mov	a,#0x0a
      000233 12r00r00         [24]  774 	lcall	__gptrput
                                    775 ;	.\src\main.c:100: array[2] = 0x00;
      000236 74 02            [12]  776 	mov	a,#0x02
      000238 2D               [12]  777 	add	a,r5
      000239 FD               [12]  778 	mov	r5,a
      00023A E4               [12]  779 	clr	a
      00023B 3E               [12]  780 	addc	a,r6
      00023C FE               [12]  781 	mov	r6,a
      00023D 8D 82            [24]  782 	mov	dpl,r5
      00023F 8E 83            [24]  783 	mov	dph,r6
      000241 8F F0            [24]  784 	mov	b,r7
      000243 E4               [12]  785 	clr	a
                                    786 ;	.\src\main.c:102: }
                                    787 ;	.\src\main.c:103: }
      000244 02r00r00         [24]  788 	ljmp	__gptrput
                                    789 ;------------------------------------------------------------
                                    790 ;Allocation info for local variables in function 'nextColumn'
                                    791 ;------------------------------------------------------------
                                    792 ;	.\src\main.c:106: void nextColumn(void)
                                    793 ;	-----------------------------------------
                                    794 ;	 function nextColumn
                                    795 ;	-----------------------------------------
      000247                        796 _nextColumn:
                                    797 ;	.\src\main.c:111: if (ptrColumn < 3)
      000247 74 FD            [12]  798 	mov	a,#0x100 - 0x03
      000249 25*02            [12]  799 	add	a,_ptrColumn
      00024B 40 11            [24]  800 	jc	00102$
                                    801 ;	.\src\main.c:112: P1 = (ptrColumn << 5) | first[ptrColumn];
      00024D E5*02            [12]  802 	mov	a,_ptrColumn
      00024F C4               [12]  803 	swap	a
      000250 23               [12]  804 	rl	a
      000251 54 E0            [12]  805 	anl	a,#0xe0
      000253 FF               [12]  806 	mov	r7,a
      000254 E5*02            [12]  807 	mov	a,_ptrColumn
      000256 24r07            [12]  808 	add	a,#_first
      000258 F9               [12]  809 	mov	r1,a
      000259 E7               [12]  810 	mov	a,@r1
      00025A FE               [12]  811 	mov	r6,a
      00025B 4F               [12]  812 	orl	a,r7
      00025C F5 90            [12]  813 	mov	_P1,a
      00025E                        814 00102$:
                                    815 ;	.\src\main.c:114: if (ptrColumn == 3)
      00025E 74 03            [12]  816 	mov	a,#0x03
      000260 B5*02 0C         [24]  817 	cjne	a,_ptrColumn,00104$
                                    818 ;	.\src\main.c:115: P1 = (ptrColumn << 5) | 0x1F;
      000263 E5*02            [12]  819 	mov	a,_ptrColumn
      000265 C4               [12]  820 	swap	a
      000266 23               [12]  821 	rl	a
      000267 54 E0            [12]  822 	anl	a,#0xe0
      000269 FF               [12]  823 	mov	r7,a
      00026A 74 1F            [12]  824 	mov	a,#0x1f
      00026C 4F               [12]  825 	orl	a,r7
      00026D F5 90            [12]  826 	mov	_P1,a
      00026F                        827 00104$:
                                    828 ;	.\src\main.c:117: if (ptrColumn > 3 && ptrColumn < 7)
      00026F E5*02            [12]  829 	mov	a,_ptrColumn
      000271 24 FC            [12]  830 	add	a,#0xff - 0x03
      000273 50 19            [24]  831 	jnc	00106$
      000275 74 F9            [12]  832 	mov	a,#0x100 - 0x07
      000277 25*02            [12]  833 	add	a,_ptrColumn
      000279 40 13            [24]  834 	jc	00106$
                                    835 ;	.\src\main.c:118: P1 = (ptrColumn << 5) | second[ptrColumn - 4];
      00027B E5*02            [12]  836 	mov	a,_ptrColumn
      00027D FF               [12]  837 	mov	r7,a
      00027E C4               [12]  838 	swap	a
      00027F 23               [12]  839 	rl	a
      000280 54 E0            [12]  840 	anl	a,#0xe0
      000282 FE               [12]  841 	mov	r6,a
      000283 EF               [12]  842 	mov	a,r7
      000284 24 FC            [12]  843 	add	a,#0xfc
      000286 24r0A            [12]  844 	add	a,#_second
      000288 F9               [12]  845 	mov	r1,a
      000289 E7               [12]  846 	mov	a,@r1
      00028A FF               [12]  847 	mov	r7,a
      00028B 4E               [12]  848 	orl	a,r6
      00028C F5 90            [12]  849 	mov	_P1,a
      00028E                        850 00106$:
                                    851 ;	.\src\main.c:120: ptrColumn++;
      00028E 05*02            [12]  852 	inc	_ptrColumn
                                    853 ;	.\src\main.c:122: if (ptrColumn == countColumn)
      000290 74 07            [12]  854 	mov	a,#0x07
      000292 B5*02 03         [24]  855 	cjne	a,_ptrColumn,00110$
                                    856 ;	.\src\main.c:123: ptrColumn = 0;
      000295 75*02 00         [24]  857 	mov	_ptrColumn,#0x00
      000298                        858 00110$:
                                    859 ;	.\src\main.c:124: }
      000298 22               [24]  860 	ret
                                    861 ;------------------------------------------------------------
                                    862 ;Allocation info for local variables in function 'setDigits'
                                    863 ;------------------------------------------------------------
                                    864 ;	.\src\main.c:128: void setDigits()
                                    865 ;	-----------------------------------------
                                    866 ;	 function setDigits
                                    867 ;	-----------------------------------------
      000299                        868 _setDigits:
                                    869 ;	.\src\main.c:130: switch(mode)
      000299 E5*01            [12]  870 	mov	a,_mode
      00029B 24 FC            [12]  871 	add	a,#0xff - 0x03
      00029D 50 01            [24]  872 	jnc	00112$
      00029F 22               [24]  873 	ret
      0002A0                        874 00112$:
      0002A0 E5*01            [12]  875 	mov	a,_mode
      0002A2 75 F0 03         [24]  876 	mov	b,#0x03
      0002A5 A4               [48]  877 	mul	ab
      0002A6 90r02rAA         [24]  878 	mov	dptr,#00113$
      0002A9 73               [24]  879 	jmp	@a+dptr
      0002AA                        880 00113$:
      0002AA 02r02rB6         [24]  881 	ljmp	00101$
      0002AD 02r02rEE         [24]  882 	ljmp	00102$
      0002B0 02r03r26         [24]  883 	ljmp	00103$
      0002B3 02r03r5E         [24]  884 	ljmp	00104$
                                    885 ;	.\src\main.c:132: case 0:		
      0002B6                        886 00101$:
                                    887 ;	.\src\main.c:133: setData(time10ms/10, &first[0]);	
      0002B6 AE*03            [24]  888 	mov	r6,_time10ms
      0002B8 7F 00            [12]  889 	mov	r7,#0x00
      0002BA 75*00 0A         [24]  890 	mov	__divsint_PARM_2,#0x0a
                                    891 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      0002BD 8F*01            [24]  892 	mov	(__divsint_PARM_2 + 1),r7
      0002BF 8E 82            [24]  893 	mov	dpl,r6
      0002C1 8F 83            [24]  894 	mov	dph,r7
      0002C3 12r00r00         [24]  895 	lcall	__divsint
      0002C6 75*00r07         [24]  896 	mov	_setData_PARM_2,#_first
      0002C9 75*01 00         [24]  897 	mov	(_setData_PARM_2 + 1),#0x00
      0002CC 75*02 40         [24]  898 	mov	(_setData_PARM_2 + 2),#0x40
      0002CF 12r00r00         [24]  899 	lcall	_setData
                                    900 ;	.\src\main.c:134: setData(time10ms%10, &second[0]);
      0002D2 AE*03            [24]  901 	mov	r6,_time10ms
      0002D4 7F 00            [12]  902 	mov	r7,#0x00
      0002D6 75*00 0A         [24]  903 	mov	__modsint_PARM_2,#0x0a
                                    904 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      0002D9 8F*01            [24]  905 	mov	(__modsint_PARM_2 + 1),r7
      0002DB 8E 82            [24]  906 	mov	dpl,r6
      0002DD 8F 83            [24]  907 	mov	dph,r7
      0002DF 12r00r00         [24]  908 	lcall	__modsint
      0002E2 75*00r0A         [24]  909 	mov	_setData_PARM_2,#_second
      0002E5 75*01 00         [24]  910 	mov	(_setData_PARM_2 + 1),#0x00
      0002E8 75*02 40         [24]  911 	mov	(_setData_PARM_2 + 2),#0x40
                                    912 ;	.\src\main.c:135: break;
      0002EB 02r00r00         [24]  913 	ljmp	_setData
                                    914 ;	.\src\main.c:136: case 1:
      0002EE                        915 00102$:
                                    916 ;	.\src\main.c:137: setData(timeSec/10, &first[0]);
      0002EE AE*04            [24]  917 	mov	r6,_timeSec
      0002F0 7F 00            [12]  918 	mov	r7,#0x00
      0002F2 75*00 0A         [24]  919 	mov	__divsint_PARM_2,#0x0a
                                    920 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      0002F5 8F*01            [24]  921 	mov	(__divsint_PARM_2 + 1),r7
      0002F7 8E 82            [24]  922 	mov	dpl,r6
      0002F9 8F 83            [24]  923 	mov	dph,r7
      0002FB 12r00r00         [24]  924 	lcall	__divsint
      0002FE 75*00r07         [24]  925 	mov	_setData_PARM_2,#_first
      000301 75*01 00         [24]  926 	mov	(_setData_PARM_2 + 1),#0x00
      000304 75*02 40         [24]  927 	mov	(_setData_PARM_2 + 2),#0x40
      000307 12r00r00         [24]  928 	lcall	_setData
                                    929 ;	.\src\main.c:138: setData(timeSec%10, &second[0]);
      00030A AE*04            [24]  930 	mov	r6,_timeSec
      00030C 7F 00            [12]  931 	mov	r7,#0x00
      00030E 75*00 0A         [24]  932 	mov	__modsint_PARM_2,#0x0a
                                    933 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000311 8F*01            [24]  934 	mov	(__modsint_PARM_2 + 1),r7
      000313 8E 82            [24]  935 	mov	dpl,r6
      000315 8F 83            [24]  936 	mov	dph,r7
      000317 12r00r00         [24]  937 	lcall	__modsint
      00031A 75*00r0A         [24]  938 	mov	_setData_PARM_2,#_second
      00031D 75*01 00         [24]  939 	mov	(_setData_PARM_2 + 1),#0x00
      000320 75*02 40         [24]  940 	mov	(_setData_PARM_2 + 2),#0x40
                                    941 ;	.\src\main.c:139: break;
      000323 02r00r00         [24]  942 	ljmp	_setData
                                    943 ;	.\src\main.c:140: case 2:
      000326                        944 00103$:
                                    945 ;	.\src\main.c:141: setData(timeMin/10, &first[0]);
      000326 AE*05            [24]  946 	mov	r6,_timeMin
      000328 7F 00            [12]  947 	mov	r7,#0x00
      00032A 75*00 0A         [24]  948 	mov	__divsint_PARM_2,#0x0a
                                    949 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      00032D 8F*01            [24]  950 	mov	(__divsint_PARM_2 + 1),r7
      00032F 8E 82            [24]  951 	mov	dpl,r6
      000331 8F 83            [24]  952 	mov	dph,r7
      000333 12r00r00         [24]  953 	lcall	__divsint
      000336 75*00r07         [24]  954 	mov	_setData_PARM_2,#_first
      000339 75*01 00         [24]  955 	mov	(_setData_PARM_2 + 1),#0x00
      00033C 75*02 40         [24]  956 	mov	(_setData_PARM_2 + 2),#0x40
      00033F 12r00r00         [24]  957 	lcall	_setData
                                    958 ;	.\src\main.c:142: setData(timeMin%10, &second[0]);
      000342 AE*05            [24]  959 	mov	r6,_timeMin
      000344 7F 00            [12]  960 	mov	r7,#0x00
      000346 75*00 0A         [24]  961 	mov	__modsint_PARM_2,#0x0a
                                    962 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000349 8F*01            [24]  963 	mov	(__modsint_PARM_2 + 1),r7
      00034B 8E 82            [24]  964 	mov	dpl,r6
      00034D 8F 83            [24]  965 	mov	dph,r7
      00034F 12r00r00         [24]  966 	lcall	__modsint
      000352 75*00r0A         [24]  967 	mov	_setData_PARM_2,#_second
      000355 75*01 00         [24]  968 	mov	(_setData_PARM_2 + 1),#0x00
      000358 75*02 40         [24]  969 	mov	(_setData_PARM_2 + 2),#0x40
                                    970 ;	.\src\main.c:143: break;
                                    971 ;	.\src\main.c:144: case 3:
      00035B 02r00r00         [24]  972 	ljmp	_setData
      00035E                        973 00104$:
                                    974 ;	.\src\main.c:145: setData(timeHour/10, &first[0]);
      00035E AE*06            [24]  975 	mov	r6,_timeHour
      000360 7F 00            [12]  976 	mov	r7,#0x00
      000362 75*00 0A         [24]  977 	mov	__divsint_PARM_2,#0x0a
                                    978 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000365 8F*01            [24]  979 	mov	(__divsint_PARM_2 + 1),r7
      000367 8E 82            [24]  980 	mov	dpl,r6
      000369 8F 83            [24]  981 	mov	dph,r7
      00036B 12r00r00         [24]  982 	lcall	__divsint
      00036E 75*00r07         [24]  983 	mov	_setData_PARM_2,#_first
      000371 75*01 00         [24]  984 	mov	(_setData_PARM_2 + 1),#0x00
      000374 75*02 40         [24]  985 	mov	(_setData_PARM_2 + 2),#0x40
      000377 12r00r00         [24]  986 	lcall	_setData
                                    987 ;	.\src\main.c:146: setData(timeHour%10, &second[0]);			
      00037A AE*06            [24]  988 	mov	r6,_timeHour
      00037C 7F 00            [12]  989 	mov	r7,#0x00
      00037E 75*00 0A         [24]  990 	mov	__modsint_PARM_2,#0x0a
                                    991 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000381 8F*01            [24]  992 	mov	(__modsint_PARM_2 + 1),r7
      000383 8E 82            [24]  993 	mov	dpl,r6
      000385 8F 83            [24]  994 	mov	dph,r7
      000387 12r00r00         [24]  995 	lcall	__modsint
      00038A 75*00r0A         [24]  996 	mov	_setData_PARM_2,#_second
      00038D 75*01 00         [24]  997 	mov	(_setData_PARM_2 + 1),#0x00
      000390 75*02 40         [24]  998 	mov	(_setData_PARM_2 + 2),#0x40
                                    999 ;	.\src\main.c:148: }
                                   1000 ;	.\src\main.c:149: }
      000393 02r00r00         [24] 1001 	ljmp	_setData
                                   1002 ;------------------------------------------------------------
                                   1003 ;Allocation info for local variables in function 'T0init'
                                   1004 ;------------------------------------------------------------
                                   1005 ;	.\src\main.c:152: void T0init(void)
                                   1006 ;	-----------------------------------------
                                   1007 ;	 function T0init
                                   1008 ;	-----------------------------------------
      000396                       1009 _T0init:
                                   1010 ;	.\src\main.c:154: TR0=0;
                                   1011 ;	assignBit
      000396 C2 8C            [12] 1012 	clr	_TR0
                                   1013 ;	.\src\main.c:155: TMOD=(TMOD&0xf0)|0x1;
      000398 E5 89            [12] 1014 	mov	a,_TMOD
      00039A 54 F0            [12] 1015 	anl	a,#0xf0
      00039C 44 01            [12] 1016 	orl	a,#0x01
      00039E F5 89            [12] 1017 	mov	_TMOD,a
                                   1018 ;	.\src\main.c:156: TL0=(~tik);
      0003A0 75 8A EF         [24] 1019 	mov	_TL0,#0xef
                                   1020 ;	.\src\main.c:157: TH0=(~tik)>>8;
      0003A3 75 8C D8         [24] 1021 	mov	_TH0,#0xd8
                                   1022 ;	.\src\main.c:158: TR0=1;
                                   1023 ;	assignBit
      0003A6 D2 8C            [12] 1024 	setb	_TR0
                                   1025 ;	.\src\main.c:159: ET0=1; 
                                   1026 ;	assignBit
      0003A8 D2 A9            [12] 1027 	setb	_ET0
                                   1028 ;	.\src\main.c:160: EA=1;
                                   1029 ;	assignBit
      0003AA D2 AF            [12] 1030 	setb	_EA
                                   1031 ;	.\src\main.c:161: }
      0003AC 22               [24] 1032 	ret
                                   1033 ;------------------------------------------------------------
                                   1034 ;Allocation info for local variables in function 'T0_int'
                                   1035 ;------------------------------------------------------------
                                   1036 ;	.\src\main.c:164: void T0_int (void) __interrupt (TF0_VECTOR)
                                   1037 ;	-----------------------------------------
                                   1038 ;	 function T0_int
                                   1039 ;	-----------------------------------------
      0003AD                       1040 _T0_int:
      0003AD C0*00            [24] 1041 	push	bits
      0003AF C0 E0            [24] 1042 	push	acc
      0003B1 C0 F0            [24] 1043 	push	b
      0003B3 C0 82            [24] 1044 	push	dpl
      0003B5 C0 83            [24] 1045 	push	dph
      0003B7 C0 07            [24] 1046 	push	(0+7)
      0003B9 C0 06            [24] 1047 	push	(0+6)
      0003BB C0 05            [24] 1048 	push	(0+5)
      0003BD C0 04            [24] 1049 	push	(0+4)
      0003BF C0 03            [24] 1050 	push	(0+3)
      0003C1 C0 02            [24] 1051 	push	(0+2)
      0003C3 C0 01            [24] 1052 	push	(0+1)
      0003C5 C0 00            [24] 1053 	push	(0+0)
      0003C7 C0 D0            [24] 1054 	push	psw
      0003C9 75 D0 00         [24] 1055 	mov	psw,#0x00
                                   1056 ;	.\src\main.c:166: TR0=0;
                                   1057 ;	assignBit
      0003CC C2 8C            [12] 1058 	clr	_TR0
                                   1059 ;	.\src\main.c:167: TL0=(~tik);
      0003CE 75 8A EF         [24] 1060 	mov	_TL0,#0xef
                                   1061 ;	.\src\main.c:168: TH0=(~tik)>>8;
      0003D1 75 8C D8         [24] 1062 	mov	_TH0,#0xd8
                                   1063 ;	.\src\main.c:169: TR0=1;
                                   1064 ;	assignBit
      0003D4 D2 8C            [12] 1065 	setb	_TR0
                                   1066 ;	.\src\main.c:170: if (started) 
      0003D6 E5*00            [12] 1067 	mov	a,_started
      0003D8 60 2B            [24] 1068 	jz	00111$
                                   1069 ;	.\src\main.c:172: time10ms++;
      0003DA 05*03            [12] 1070 	inc	_time10ms
                                   1071 ;	.\src\main.c:173: if (time10ms == 100) 
      0003DC 74 64            [12] 1072 	mov	a,#0x64
      0003DE B5*03 21         [24] 1073 	cjne	a,_time10ms,00108$
                                   1074 ;	.\src\main.c:175: time10ms = 0;
      0003E1 75*03 00         [24] 1075 	mov	_time10ms,#0x00
                                   1076 ;	.\src\main.c:176: timeSec++;
      0003E4 05*04            [12] 1077 	inc	_timeSec
                                   1078 ;	.\src\main.c:177: if (timeSec == 60) 
      0003E6 74 3C            [12] 1079 	mov	a,#0x3c
      0003E8 B5*04 17         [24] 1080 	cjne	a,_timeSec,00108$
                                   1081 ;	.\src\main.c:179: timeSec = 0;
      0003EB 75*04 00         [24] 1082 	mov	_timeSec,#0x00
                                   1083 ;	.\src\main.c:180: timeMin++;
      0003EE 05*05            [12] 1084 	inc	_timeMin
                                   1085 ;	.\src\main.c:181: if (timeMin == 60) 
      0003F0 74 3C            [12] 1086 	mov	a,#0x3c
      0003F2 B5*05 0D         [24] 1087 	cjne	a,_timeMin,00108$
                                   1088 ;	.\src\main.c:183: timeMin = 0;
      0003F5 75*05 00         [24] 1089 	mov	_timeMin,#0x00
                                   1090 ;	.\src\main.c:184: timeHour++;
      0003F8 05*06            [12] 1091 	inc	_timeHour
                                   1092 ;	.\src\main.c:185: if (timeHour == 24)
      0003FA 74 18            [12] 1093 	mov	a,#0x18
      0003FC B5*06 03         [24] 1094 	cjne	a,_timeHour,00108$
                                   1095 ;	.\src\main.c:186: timeHour = 0;
      0003FF 75*06 00         [24] 1096 	mov	_timeHour,#0x00
      000402                       1097 00108$:
                                   1098 ;	.\src\main.c:190: setDigits();
      000402 12r02r99         [24] 1099 	lcall	_setDigits
      000405                       1100 00111$:
                                   1101 ;	.\src\main.c:192: }
      000405 D0 D0            [24] 1102 	pop	psw
      000407 D0 00            [24] 1103 	pop	(0+0)
      000409 D0 01            [24] 1104 	pop	(0+1)
      00040B D0 02            [24] 1105 	pop	(0+2)
      00040D D0 03            [24] 1106 	pop	(0+3)
      00040F D0 04            [24] 1107 	pop	(0+4)
      000411 D0 05            [24] 1108 	pop	(0+5)
      000413 D0 06            [24] 1109 	pop	(0+6)
      000415 D0 07            [24] 1110 	pop	(0+7)
      000417 D0 83            [24] 1111 	pop	dph
      000419 D0 82            [24] 1112 	pop	dpl
      00041B D0 F0            [24] 1113 	pop	b
      00041D D0 E0            [24] 1114 	pop	acc
      00041F D0*00            [24] 1115 	pop	bits
      000421 32               [24] 1116 	reti
                                   1117 ;------------------------------------------------------------
                                   1118 ;Allocation info for local variables in function 'delayFOR'
                                   1119 ;------------------------------------------------------------
                                   1120 ;kodF                      Allocated to registers r7 
                                   1121 ;ml                        Allocated to registers r6 
                                   1122 ;------------------------------------------------------------
                                   1123 ;	.\src\main.c:195: void delayFOR(unsigned char kodF)
                                   1124 ;	-----------------------------------------
                                   1125 ;	 function delayFOR
                                   1126 ;	-----------------------------------------
      000422                       1127 _delayFOR:
      000422 AF 82            [24] 1128 	mov	r7,dpl
                                   1129 ;	.\src\main.c:198: for(ml = 0; ml < kodF; ml++){}
      000424 7E 00            [12] 1130 	mov	r6,#0x00
      000426                       1131 00103$:
      000426 C3               [12] 1132 	clr	c
      000427 EE               [12] 1133 	mov	a,r6
      000428 9F               [12] 1134 	subb	a,r7
      000429 50 03            [24] 1135 	jnc	00105$
      00042B 0E               [12] 1136 	inc	r6
      00042C 80 F8            [24] 1137 	sjmp	00103$
      00042E                       1138 00105$:
                                   1139 ;	.\src\main.c:199: }
      00042E 22               [24] 1140 	ret
                                   1141 ;------------------------------------------------------------
                                   1142 ;Allocation info for local variables in function 'DelayMS'
                                   1143 ;------------------------------------------------------------
                                   1144 ;KodMS                     Allocated to registers 
                                   1145 ;------------------------------------------------------------
                                   1146 ;	.\src\main.c:202: void DelayMS(unsigned char KodMS)
                                   1147 ;	-----------------------------------------
                                   1148 ;	 function DelayMS
                                   1149 ;	-----------------------------------------
      00042F                       1150 _DelayMS:
      00042F AF 82            [24] 1151 	mov	r7,dpl
                                   1152 ;	.\src\main.c:204: do delay1ms;
      000431                       1153 00101$:
      000431 75 82 63         [24] 1154 	mov	dpl,#0x63
      000434 C0 07            [24] 1155 	push	ar7
      000436 12r04r22         [24] 1156 	lcall	_delayFOR
      000439 D0 07            [24] 1157 	pop	ar7
                                   1158 ;	.\src\main.c:205: while(--KodMS);
      00043B DF F4            [24] 1159 	djnz	r7,00101$
                                   1160 ;	.\src\main.c:206: }
      00043D 22               [24] 1161 	ret
                                   1162 ;------------------------------------------------------------
                                   1163 ;Allocation info for local variables in function 'buttonsCheck'
                                   1164 ;------------------------------------------------------------
                                   1165 ;	.\src\main.c:209: void buttonsCheck(void)
                                   1166 ;	-----------------------------------------
                                   1167 ;	 function buttonsCheck
                                   1168 ;	-----------------------------------------
      00043E                       1169 _buttonsCheck:
                                   1170 ;	.\src\main.c:212: if (!P3_0) 
      00043E 20 B0 1E         [24] 1171 	jb	_P3_0,00108$
                                   1172 ;	.\src\main.c:215: P1 = 0x1F;
      000441 75 90 1F         [24] 1173 	mov	_P1,#0x1f
                                   1174 ;	.\src\main.c:217: DelayMS(10);
      000444 75 82 0A         [24] 1175 	mov	dpl,#0x0a
      000447 12r04r2F         [24] 1176 	lcall	_DelayMS
                                   1177 ;	.\src\main.c:219: while(!P3_0);
      00044A                       1178 00101$:
      00044A 30 B0 FD         [24] 1179 	jnb	_P3_0,00101$
                                   1180 ;	.\src\main.c:221: DelayMS(10);
      00044D 75 82 0A         [24] 1181 	mov	dpl,#0x0a
      000450 12r04r2F         [24] 1182 	lcall	_DelayMS
                                   1183 ;	.\src\main.c:223: if (started)
      000453 E5*00            [12] 1184 	mov	a,_started
      000455 60 05            [24] 1185 	jz	00105$
                                   1186 ;	.\src\main.c:225: started = 0;
      000457 75*00 00         [24] 1187 	mov	_started,#0x00
      00045A 80 03            [24] 1188 	sjmp	00108$
      00045C                       1189 00105$:
                                   1190 ;	.\src\main.c:228: started = 1;
      00045C 75*00 01         [24] 1191 	mov	_started,#0x01
      00045F                       1192 00108$:
                                   1193 ;	.\src\main.c:232: if (!P3_1) 
      00045F 20 B1 1F         [24] 1194 	jb	_P3_1,00115$
                                   1195 ;	.\src\main.c:235: P1 = 0x1F;
      000462 75 90 1F         [24] 1196 	mov	_P1,#0x1f
                                   1197 ;	.\src\main.c:237: DelayMS(10);
      000465 75 82 0A         [24] 1198 	mov	dpl,#0x0a
      000468 12r04r2F         [24] 1199 	lcall	_DelayMS
                                   1200 ;	.\src\main.c:239: while(!P3_1);
      00046B                       1201 00109$:
      00046B 30 B1 FD         [24] 1202 	jnb	_P3_1,00109$
                                   1203 ;	.\src\main.c:241: DelayMS(10);
      00046E 75 82 0A         [24] 1204 	mov	dpl,#0x0a
      000471 12r04r2F         [24] 1205 	lcall	_DelayMS
                                   1206 ;	.\src\main.c:243: mode++;
      000474 05*01            [12] 1207 	inc	_mode
                                   1208 ;	.\src\main.c:244: if (mode == 4)
      000476 74 04            [12] 1209 	mov	a,#0x04
      000478 B5*01 03         [24] 1210 	cjne	a,_mode,00113$
                                   1211 ;	.\src\main.c:245: mode = 0;
      00047B 75*01 00         [24] 1212 	mov	_mode,#0x00
      00047E                       1213 00113$:
                                   1214 ;	.\src\main.c:247: setDigits();
      00047E 12r02r99         [24] 1215 	lcall	_setDigits
      000481                       1216 00115$:
                                   1217 ;	.\src\main.c:250: if (!P3_2)
      000481 20 B2 1B         [24] 1218 	jb	_P3_2,00118$
                                   1219 ;	.\src\main.c:253: DelayMS(10);
      000484 75 82 0A         [24] 1220 	mov	dpl,#0x0a
      000487 12r04r2F         [24] 1221 	lcall	_DelayMS
                                   1222 ;	.\src\main.c:254: time10ms=0;
      00048A 75*03 00         [24] 1223 	mov	_time10ms,#0x00
                                   1224 ;	.\src\main.c:256: timeSec = 0;
      00048D 75*04 00         [24] 1225 	mov	_timeSec,#0x00
                                   1226 ;	.\src\main.c:258: timeMin = 0;
      000490 75*05 00         [24] 1227 	mov	_timeMin,#0x00
                                   1228 ;	.\src\main.c:260: timeHour = 0;
      000493 75*06 00         [24] 1229 	mov	_timeHour,#0x00
                                   1230 ;	.\src\main.c:261: DelayMS(10);
      000496 75 82 0A         [24] 1231 	mov	dpl,#0x0a
      000499 12r04r2F         [24] 1232 	lcall	_DelayMS
                                   1233 ;	.\src\main.c:262: setDigits();
                                   1234 ;	.\src\main.c:264: }
      00049C 02r02r99         [24] 1235 	ljmp	_setDigits
      00049F                       1236 00118$:
      00049F 22               [24] 1237 	ret
                                   1238 ;------------------------------------------------------------
                                   1239 ;Allocation info for local variables in function 'main'
                                   1240 ;------------------------------------------------------------
                                   1241 ;	.\src\main.c:266: void main(void){
                                   1242 ;	-----------------------------------------
                                   1243 ;	 function main
                                   1244 ;	-----------------------------------------
      0004A0                       1245 _main:
                                   1246 ;	.\src\main.c:268: T0init();
      0004A0 12r03r96         [24] 1247 	lcall	_T0init
                                   1248 ;	.\src\main.c:270: setDigits();
      0004A3 12r02r99         [24] 1249 	lcall	_setDigits
                                   1250 ;	.\src\main.c:271: while(1){
      0004A6                       1251 00102$:
                                   1252 ;	.\src\main.c:273: buttonsCheck();
      0004A6 12r04r3E         [24] 1253 	lcall	_buttonsCheck
                                   1254 ;	.\src\main.c:275: delayFOR(10);
      0004A9 75 82 0A         [24] 1255 	mov	dpl,#0x0a
      0004AC 12r04r22         [24] 1256 	lcall	_delayFOR
                                   1257 ;	.\src\main.c:277: nextColumn();
      0004AF 12r02r47         [24] 1258 	lcall	_nextColumn
                                   1259 ;	.\src\main.c:279: }
      0004B2 80 F2            [24] 1260 	sjmp	00102$
                                   1261 	.area CSEG    (CODE)
                                   1262 	.area CONST   (CODE)
                                   1263 	.area XINIT   (CODE)
                                   1264 	.area CABS    (ABS,CODE)
