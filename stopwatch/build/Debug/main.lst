                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _setData_PARM_2
                                     12 	.globl _main
                                     13 	.globl _buttonsCheck
                                     14 	.globl _DelayMS
                                     15 	.globl _delayFOR
                                     16 	.globl _T0_int
                                     17 	.globl _T0init
                                     18 	.globl _setDigits
                                     19 	.globl _nextColumn
                                     20 	.globl _setData
                                     21 	.globl _CY
                                     22 	.globl _AC
                                     23 	.globl _F0
                                     24 	.globl _RS1
                                     25 	.globl _RS0
                                     26 	.globl _OV
                                     27 	.globl _FL
                                     28 	.globl _P
                                     29 	.globl _PS
                                     30 	.globl _PT1
                                     31 	.globl _PX1
                                     32 	.globl _PT0
                                     33 	.globl _PX0
                                     34 	.globl _RD
                                     35 	.globl _WR
                                     36 	.globl _T1
                                     37 	.globl _T0
                                     38 	.globl _INT1
                                     39 	.globl _INT0
                                     40 	.globl _TXD
                                     41 	.globl _RXD
                                     42 	.globl _P3_7
                                     43 	.globl _P3_6
                                     44 	.globl _P3_5
                                     45 	.globl _P3_4
                                     46 	.globl _P3_3
                                     47 	.globl _P3_2
                                     48 	.globl _P3_1
                                     49 	.globl _P3_0
                                     50 	.globl _EA
                                     51 	.globl _ES
                                     52 	.globl _ET1
                                     53 	.globl _EX1
                                     54 	.globl _ET0
                                     55 	.globl _EX0
                                     56 	.globl _P2_7
                                     57 	.globl _P2_6
                                     58 	.globl _P2_5
                                     59 	.globl _P2_4
                                     60 	.globl _P2_3
                                     61 	.globl _P2_2
                                     62 	.globl _P2_1
                                     63 	.globl _P2_0
                                     64 	.globl _SM0
                                     65 	.globl _SM1
                                     66 	.globl _SM2
                                     67 	.globl _REN
                                     68 	.globl _TB8
                                     69 	.globl _RB8
                                     70 	.globl _TI
                                     71 	.globl _RI
                                     72 	.globl _P1_7
                                     73 	.globl _P1_6
                                     74 	.globl _P1_5
                                     75 	.globl _P1_4
                                     76 	.globl _P1_3
                                     77 	.globl _P1_2
                                     78 	.globl _P1_1
                                     79 	.globl _P1_0
                                     80 	.globl _TF1
                                     81 	.globl _TR1
                                     82 	.globl _TF0
                                     83 	.globl _TR0
                                     84 	.globl _IE1
                                     85 	.globl _IT1
                                     86 	.globl _IE0
                                     87 	.globl _IT0
                                     88 	.globl _P0_7
                                     89 	.globl _P0_6
                                     90 	.globl _P0_5
                                     91 	.globl _P0_4
                                     92 	.globl _P0_3
                                     93 	.globl _P0_2
                                     94 	.globl _P0_1
                                     95 	.globl _P0_0
                                     96 	.globl _B
                                     97 	.globl _A
                                     98 	.globl _ACC
                                     99 	.globl _PSW
                                    100 	.globl _IP
                                    101 	.globl _P3
                                    102 	.globl _IE
                                    103 	.globl _P2
                                    104 	.globl _SBUF
                                    105 	.globl _SCON
                                    106 	.globl _P1
                                    107 	.globl _TH1
                                    108 	.globl _TH0
                                    109 	.globl _TL1
                                    110 	.globl _TL0
                                    111 	.globl _TMOD
                                    112 	.globl _TCON
                                    113 	.globl _PCON
                                    114 	.globl _DPH
                                    115 	.globl _DPL
                                    116 	.globl _SP
                                    117 	.globl _P0
                                    118 	.globl _second
                                    119 	.globl _first
                                    120 	.globl _timeHour
                                    121 	.globl _timeMin
                                    122 	.globl _timeSec
                                    123 	.globl _time10ms
                                    124 	.globl _ptrColumn
                                    125 	.globl _mode
                                    126 	.globl _started
                                    127 ;--------------------------------------------------------
                                    128 ; special function registers
                                    129 ;--------------------------------------------------------
                                    130 	.area RSEG    (ABS,DATA)
      000000                        131 	.org 0x0000
                           000080   132 _P0	=	0x0080
                           000081   133 _SP	=	0x0081
                           000082   134 _DPL	=	0x0082
                           000083   135 _DPH	=	0x0083
                           000087   136 _PCON	=	0x0087
                           000088   137 _TCON	=	0x0088
                           000089   138 _TMOD	=	0x0089
                           00008A   139 _TL0	=	0x008a
                           00008B   140 _TL1	=	0x008b
                           00008C   141 _TH0	=	0x008c
                           00008D   142 _TH1	=	0x008d
                           000090   143 _P1	=	0x0090
                           000098   144 _SCON	=	0x0098
                           000099   145 _SBUF	=	0x0099
                           0000A0   146 _P2	=	0x00a0
                           0000A8   147 _IE	=	0x00a8
                           0000B0   148 _P3	=	0x00b0
                           0000B8   149 _IP	=	0x00b8
                           0000D0   150 _PSW	=	0x00d0
                           0000E0   151 _ACC	=	0x00e0
                           0000E0   152 _A	=	0x00e0
                           0000F0   153 _B	=	0x00f0
                                    154 ;--------------------------------------------------------
                                    155 ; special function bits
                                    156 ;--------------------------------------------------------
                                    157 	.area RSEG    (ABS,DATA)
      000000                        158 	.org 0x0000
                           000080   159 _P0_0	=	0x0080
                           000081   160 _P0_1	=	0x0081
                           000082   161 _P0_2	=	0x0082
                           000083   162 _P0_3	=	0x0083
                           000084   163 _P0_4	=	0x0084
                           000085   164 _P0_5	=	0x0085
                           000086   165 _P0_6	=	0x0086
                           000087   166 _P0_7	=	0x0087
                           000088   167 _IT0	=	0x0088
                           000089   168 _IE0	=	0x0089
                           00008A   169 _IT1	=	0x008a
                           00008B   170 _IE1	=	0x008b
                           00008C   171 _TR0	=	0x008c
                           00008D   172 _TF0	=	0x008d
                           00008E   173 _TR1	=	0x008e
                           00008F   174 _TF1	=	0x008f
                           000090   175 _P1_0	=	0x0090
                           000091   176 _P1_1	=	0x0091
                           000092   177 _P1_2	=	0x0092
                           000093   178 _P1_3	=	0x0093
                           000094   179 _P1_4	=	0x0094
                           000095   180 _P1_5	=	0x0095
                           000096   181 _P1_6	=	0x0096
                           000097   182 _P1_7	=	0x0097
                           000098   183 _RI	=	0x0098
                           000099   184 _TI	=	0x0099
                           00009A   185 _RB8	=	0x009a
                           00009B   186 _TB8	=	0x009b
                           00009C   187 _REN	=	0x009c
                           00009D   188 _SM2	=	0x009d
                           00009E   189 _SM1	=	0x009e
                           00009F   190 _SM0	=	0x009f
                           0000A0   191 _P2_0	=	0x00a0
                           0000A1   192 _P2_1	=	0x00a1
                           0000A2   193 _P2_2	=	0x00a2
                           0000A3   194 _P2_3	=	0x00a3
                           0000A4   195 _P2_4	=	0x00a4
                           0000A5   196 _P2_5	=	0x00a5
                           0000A6   197 _P2_6	=	0x00a6
                           0000A7   198 _P2_7	=	0x00a7
                           0000A8   199 _EX0	=	0x00a8
                           0000A9   200 _ET0	=	0x00a9
                           0000AA   201 _EX1	=	0x00aa
                           0000AB   202 _ET1	=	0x00ab
                           0000AC   203 _ES	=	0x00ac
                           0000AF   204 _EA	=	0x00af
                           0000B0   205 _P3_0	=	0x00b0
                           0000B1   206 _P3_1	=	0x00b1
                           0000B2   207 _P3_2	=	0x00b2
                           0000B3   208 _P3_3	=	0x00b3
                           0000B4   209 _P3_4	=	0x00b4
                           0000B5   210 _P3_5	=	0x00b5
                           0000B6   211 _P3_6	=	0x00b6
                           0000B7   212 _P3_7	=	0x00b7
                           0000B0   213 _RXD	=	0x00b0
                           0000B1   214 _TXD	=	0x00b1
                           0000B2   215 _INT0	=	0x00b2
                           0000B3   216 _INT1	=	0x00b3
                           0000B4   217 _T0	=	0x00b4
                           0000B5   218 _T1	=	0x00b5
                           0000B6   219 _WR	=	0x00b6
                           0000B7   220 _RD	=	0x00b7
                           0000B8   221 _PX0	=	0x00b8
                           0000B9   222 _PT0	=	0x00b9
                           0000BA   223 _PX1	=	0x00ba
                           0000BB   224 _PT1	=	0x00bb
                           0000BC   225 _PS	=	0x00bc
                           0000D0   226 _P	=	0x00d0
                           0000D1   227 _FL	=	0x00d1
                           0000D2   228 _OV	=	0x00d2
                           0000D3   229 _RS0	=	0x00d3
                           0000D4   230 _RS1	=	0x00d4
                           0000D5   231 _F0	=	0x00d5
                           0000D6   232 _AC	=	0x00d6
                           0000D7   233 _CY	=	0x00d7
                                    234 ;--------------------------------------------------------
                                    235 ; overlayable register banks
                                    236 ;--------------------------------------------------------
                                    237 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        238 	.ds 8
                                    239 ;--------------------------------------------------------
                                    240 ; overlayable bit register bank
                                    241 ;--------------------------------------------------------
                                    242 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        243 bits:
      000000                        244 	.ds 1
                           008000   245 	b0 = bits[0]
                           008100   246 	b1 = bits[1]
                           008200   247 	b2 = bits[2]
                           008300   248 	b3 = bits[3]
                           008400   249 	b4 = bits[4]
                           008500   250 	b5 = bits[5]
                           008600   251 	b6 = bits[6]
                           008700   252 	b7 = bits[7]
                                    253 ;--------------------------------------------------------
                                    254 ; internal ram data
                                    255 ;--------------------------------------------------------
                                    256 	.area DSEG    (DATA)
      000000                        257 _started::
      000000                        258 	.ds 1
      000001                        259 _mode::
      000001                        260 	.ds 1
      000002                        261 _ptrColumn::
      000002                        262 	.ds 1
      000003                        263 _time10ms::
      000003                        264 	.ds 1
      000004                        265 _timeSec::
      000004                        266 	.ds 1
      000005                        267 _timeMin::
      000005                        268 	.ds 1
      000006                        269 _timeHour::
      000006                        270 	.ds 1
      000007                        271 _first::
      000007                        272 	.ds 3
      00000A                        273 _second::
      00000A                        274 	.ds 3
                                    275 ;--------------------------------------------------------
                                    276 ; overlayable items in internal ram 
                                    277 ;--------------------------------------------------------
                                    278 	.area	OSEG    (OVR,DATA)
      000000                        279 _setData_PARM_2:
      000000                        280 	.ds 3
                                    281 	.area	OSEG    (OVR,DATA)
                                    282 ;--------------------------------------------------------
                                    283 ; Stack segment in internal ram 
                                    284 ;--------------------------------------------------------
                                    285 	.area	SSEG
      000000                        286 __start__stack:
      000000                        287 	.ds	1
                                    288 
                                    289 ;--------------------------------------------------------
                                    290 ; indirectly addressable internal ram data
                                    291 ;--------------------------------------------------------
                                    292 	.area ISEG    (DATA)
                                    293 ;--------------------------------------------------------
                                    294 ; absolute internal ram data
                                    295 ;--------------------------------------------------------
                                    296 	.area IABS    (ABS,DATA)
                                    297 	.area IABS    (ABS,DATA)
                                    298 ;--------------------------------------------------------
                                    299 ; bit data
                                    300 ;--------------------------------------------------------
                                    301 	.area BSEG    (BIT)
                                    302 ;--------------------------------------------------------
                                    303 ; paged external ram data
                                    304 ;--------------------------------------------------------
                                    305 	.area PSEG    (PAG,XDATA)
                                    306 ;--------------------------------------------------------
                                    307 ; external ram data
                                    308 ;--------------------------------------------------------
                                    309 	.area XSEG    (XDATA)
                                    310 ;--------------------------------------------------------
                                    311 ; absolute external ram data
                                    312 ;--------------------------------------------------------
                                    313 	.area XABS    (ABS,XDATA)
                                    314 ;--------------------------------------------------------
                                    315 ; external initialized ram data
                                    316 ;--------------------------------------------------------
                                    317 	.area XISEG   (XDATA)
                                    318 	.area HOME    (CODE)
                                    319 	.area GSINIT0 (CODE)
                                    320 	.area GSINIT1 (CODE)
                                    321 	.area GSINIT2 (CODE)
                                    322 	.area GSINIT3 (CODE)
                                    323 	.area GSINIT4 (CODE)
                                    324 	.area GSINIT5 (CODE)
                                    325 	.area GSINIT  (CODE)
                                    326 	.area GSFINAL (CODE)
                                    327 	.area CSEG    (CODE)
                                    328 ;--------------------------------------------------------
                                    329 ; interrupt vector 
                                    330 ;--------------------------------------------------------
                                    331 	.area HOME    (CODE)
      000000                        332 __interrupt_vect:
      000000 02r00r00         [24]  333 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  334 	reti
      000004                        335 	.ds	7
      00000B 02r03rA8         [24]  336 	ljmp	_T0_int
                                    337 ;--------------------------------------------------------
                                    338 ; global & static initialisations
                                    339 ;--------------------------------------------------------
                                    340 	.area HOME    (CODE)
                                    341 	.area GSINIT  (CODE)
                                    342 	.area GSFINAL (CODE)
                                    343 	.area GSINIT  (CODE)
                                    344 	.globl __sdcc_gsinit_startup
                                    345 	.globl __sdcc_program_startup
                                    346 	.globl __start__stack
                                    347 	.globl __mcs51_genXINIT
                                    348 	.globl __mcs51_genXRAMCLEAR
                                    349 	.globl __mcs51_genRAMCLEAR
                                    350 ;	.\src\main.c:14: unsigned char started = 0;
      000000 75*00 00         [24]  351 	mov	_started,#0x00
                                    352 ;	.\src\main.c:21: unsigned char mode = 1;
      000003 75*01 01         [24]  353 	mov	_mode,#0x01
                                    354 ;	.\src\main.c:24: unsigned char ptrColumn = 0;
      000006 75*02 00         [24]  355 	mov	_ptrColumn,#0x00
                                    356 ;	.\src\main.c:27: unsigned char time10ms = 0;
      000009 75*03 00         [24]  357 	mov	_time10ms,#0x00
                                    358 ;	.\src\main.c:29: unsigned char timeSec = 0;
      00000C 75*04 00         [24]  359 	mov	_timeSec,#0x00
                                    360 ;	.\src\main.c:31: unsigned char timeMin = 0;
      00000F 75*05 00         [24]  361 	mov	_timeMin,#0x00
                                    362 ;	.\src\main.c:33: unsigned char timeHour = 0;
      000012 75*06 00         [24]  363 	mov	_timeHour,#0x00
                                    364 	.area GSFINAL (CODE)
      000000 02r00r0E         [24]  365 	ljmp	__sdcc_program_startup
                                    366 ;--------------------------------------------------------
                                    367 ; Home
                                    368 ;--------------------------------------------------------
                                    369 	.area HOME    (CODE)
                                    370 	.area HOME    (CODE)
      00000E                        371 __sdcc_program_startup:
      00000E 02r04r9B         [24]  372 	ljmp	_main
                                    373 ;	return from main will return to caller
                                    374 ;--------------------------------------------------------
                                    375 ; code
                                    376 ;--------------------------------------------------------
                                    377 	.area CSEG    (CODE)
                                    378 ;------------------------------------------------------------
                                    379 ;Allocation info for local variables in function 'setData'
                                    380 ;------------------------------------------------------------
                                    381 ;array                     Allocated with name '_setData_PARM_2'
                                    382 ;digit                     Allocated to registers r7 
                                    383 ;------------------------------------------------------------
                                    384 ;	.\src\main.c:40: void setData(unsigned char digit, unsigned char *array)
                                    385 ;	-----------------------------------------
                                    386 ;	 function setData
                                    387 ;	-----------------------------------------
      000000                        388 _setData:
                           000007   389 	ar7 = 0x07
                           000006   390 	ar6 = 0x06
                           000005   391 	ar5 = 0x05
                           000004   392 	ar4 = 0x04
                           000003   393 	ar3 = 0x03
                           000002   394 	ar2 = 0x02
                           000001   395 	ar1 = 0x01
                           000000   396 	ar0 = 0x00
                                    397 ;	.\src\main.c:42: switch(digit)
      000000 E5 82            [12]  398 	mov	a,dpl
      000002 FF               [12]  399 	mov	r7,a
      000003 24 F6            [12]  400 	add	a,#0xff - 0x09
      000005 50 01            [24]  401 	jnc	00118$
      000007 22               [24]  402 	ret
      000008                        403 00118$:
      000008 EF               [12]  404 	mov	a,r7
      000009 2F               [12]  405 	add	a,r7
      00000A 2F               [12]  406 	add	a,r7
      00000B 90r00r0F         [24]  407 	mov	dptr,#00119$
      00000E 73               [24]  408 	jmp	@a+dptr
      00000F                        409 00119$:
      00000F 02r00r2D         [24]  410 	ljmp	00101$
      000012 02r00r61         [24]  411 	ljmp	00102$
      000015 02r00r96         [24]  412 	ljmp	00103$
      000018 02r00rCD         [24]  413 	ljmp	00104$
      00001B 02r01r02         [24]  414 	ljmp	00105$
      00001E 02r01r37         [24]  415 	ljmp	00106$
      000021 02r01r6D         [24]  416 	ljmp	00107$
      000024 02r01rA2         [24]  417 	ljmp	00108$
      000027 02r01rD9         [24]  418 	ljmp	00109$
      00002A 02r02r0D         [24]  419 	ljmp	00110$
                                    420 ;	.\src\main.c:45: case 0:
      00002D                        421 00101$:
                                    422 ;	.\src\main.c:47: array[0] = 0x00;
      00002D AD*00            [24]  423 	mov	r5,_setData_PARM_2
      00002F AE*01            [24]  424 	mov	r6,(_setData_PARM_2 + 1)
      000031 AF*02            [24]  425 	mov	r7,(_setData_PARM_2 + 2)
      000033 8D 82            [24]  426 	mov	dpl,r5
      000035 8E 83            [24]  427 	mov	dph,r6
      000037 8F F0            [24]  428 	mov	b,r7
      000039 E4               [12]  429 	clr	a
      00003A 12r00r00         [24]  430 	lcall	__gptrput
                                    431 ;	.\src\main.c:49: array[1] = 0x0E;
      00003D 04               [12]  432 	inc	a
      00003E 2D               [12]  433 	add	a,r5
      00003F FA               [12]  434 	mov	r2,a
      000040 E4               [12]  435 	clr	a
      000041 3E               [12]  436 	addc	a,r6
      000042 FB               [12]  437 	mov	r3,a
      000043 8F 04            [24]  438 	mov	ar4,r7
      000045 8A 82            [24]  439 	mov	dpl,r2
      000047 8B 83            [24]  440 	mov	dph,r3
      000049 8C F0            [24]  441 	mov	b,r4
      00004B 74 0E            [12]  442 	mov	a,#0x0e
      00004D 12r00r00         [24]  443 	lcall	__gptrput
                                    444 ;	.\src\main.c:51: array[2] = 0x00;
      000050 74 02            [12]  445 	mov	a,#0x02
      000052 2D               [12]  446 	add	a,r5
      000053 FD               [12]  447 	mov	r5,a
      000054 E4               [12]  448 	clr	a
      000055 3E               [12]  449 	addc	a,r6
      000056 FE               [12]  450 	mov	r6,a
      000057 8D 82            [24]  451 	mov	dpl,r5
      000059 8E 83            [24]  452 	mov	dph,r6
      00005B 8F F0            [24]  453 	mov	b,r7
      00005D E4               [12]  454 	clr	a
                                    455 ;	.\src\main.c:56: break;
      00005E 02r00r00         [24]  456 	ljmp	__gptrput
                                    457 ;	.\src\main.c:57: case 1:
      000061                        458 00102$:
                                    459 ;	.\src\main.c:58: array[0] = 0x00;
      000061 AD*00            [24]  460 	mov	r5,_setData_PARM_2
      000063 AE*01            [24]  461 	mov	r6,(_setData_PARM_2 + 1)
      000065 AF*02            [24]  462 	mov	r7,(_setData_PARM_2 + 2)
      000067 8D 82            [24]  463 	mov	dpl,r5
      000069 8E 83            [24]  464 	mov	dph,r6
      00006B 8F F0            [24]  465 	mov	b,r7
      00006D E4               [12]  466 	clr	a
      00006E 12r00r00         [24]  467 	lcall	__gptrput
                                    468 ;	.\src\main.c:59: array[1] = 0x1D;
      000071 04               [12]  469 	inc	a
      000072 2D               [12]  470 	add	a,r5
      000073 FA               [12]  471 	mov	r2,a
      000074 E4               [12]  472 	clr	a
      000075 3E               [12]  473 	addc	a,r6
      000076 FB               [12]  474 	mov	r3,a
      000077 8F 04            [24]  475 	mov	ar4,r7
      000079 8A 82            [24]  476 	mov	dpl,r2
      00007B 8B 83            [24]  477 	mov	dph,r3
      00007D 8C F0            [24]  478 	mov	b,r4
      00007F 74 1D            [12]  479 	mov	a,#0x1d
      000081 12r00r00         [24]  480 	lcall	__gptrput
                                    481 ;	.\src\main.c:60: array[2] = 0x1B;
      000084 74 02            [12]  482 	mov	a,#0x02
      000086 2D               [12]  483 	add	a,r5
      000087 FD               [12]  484 	mov	r5,a
      000088 E4               [12]  485 	clr	a
      000089 3E               [12]  486 	addc	a,r6
      00008A FE               [12]  487 	mov	r6,a
      00008B 8D 82            [24]  488 	mov	dpl,r5
      00008D 8E 83            [24]  489 	mov	dph,r6
      00008F 8F F0            [24]  490 	mov	b,r7
      000091 74 1B            [12]  491 	mov	a,#0x1b
                                    492 ;	.\src\main.c:61: break;
      000093 02r00r00         [24]  493 	ljmp	__gptrput
                                    494 ;	.\src\main.c:62: case 2:
      000096                        495 00103$:
                                    496 ;	.\src\main.c:63: array[0] = 0x08;
      000096 AD*00            [24]  497 	mov	r5,_setData_PARM_2
      000098 AE*01            [24]  498 	mov	r6,(_setData_PARM_2 + 1)
      00009A AF*02            [24]  499 	mov	r7,(_setData_PARM_2 + 2)
      00009C 8D 82            [24]  500 	mov	dpl,r5
      00009E 8E 83            [24]  501 	mov	dph,r6
      0000A0 8F F0            [24]  502 	mov	b,r7
      0000A2 74 08            [12]  503 	mov	a,#0x08
      0000A4 12r00r00         [24]  504 	lcall	__gptrput
                                    505 ;	.\src\main.c:64: array[1] = 0x0A;
      0000A7 74 01            [12]  506 	mov	a,#0x01
      0000A9 2D               [12]  507 	add	a,r5
      0000AA FA               [12]  508 	mov	r2,a
      0000AB E4               [12]  509 	clr	a
      0000AC 3E               [12]  510 	addc	a,r6
      0000AD FB               [12]  511 	mov	r3,a
      0000AE 8F 04            [24]  512 	mov	ar4,r7
      0000B0 8A 82            [24]  513 	mov	dpl,r2
      0000B2 8B 83            [24]  514 	mov	dph,r3
      0000B4 8C F0            [24]  515 	mov	b,r4
      0000B6 74 0A            [12]  516 	mov	a,#0x0a
      0000B8 12r00r00         [24]  517 	lcall	__gptrput
                                    518 ;	.\src\main.c:65: array[2] = 0x04;
      0000BB 74 02            [12]  519 	mov	a,#0x02
      0000BD 2D               [12]  520 	add	a,r5
      0000BE FD               [12]  521 	mov	r5,a
      0000BF E4               [12]  522 	clr	a
      0000C0 3E               [12]  523 	addc	a,r6
      0000C1 FE               [12]  524 	mov	r6,a
      0000C2 8D 82            [24]  525 	mov	dpl,r5
      0000C4 8E 83            [24]  526 	mov	dph,r6
      0000C6 8F F0            [24]  527 	mov	b,r7
      0000C8 74 04            [12]  528 	mov	a,#0x04
                                    529 ;	.\src\main.c:66: break;
      0000CA 02r00r00         [24]  530 	ljmp	__gptrput
                                    531 ;	.\src\main.c:67: case 3:
      0000CD                        532 00104$:
                                    533 ;	.\src\main.c:68: array[0] = 0x00;
      0000CD AD*00            [24]  534 	mov	r5,_setData_PARM_2
      0000CF AE*01            [24]  535 	mov	r6,(_setData_PARM_2 + 1)
      0000D1 AF*02            [24]  536 	mov	r7,(_setData_PARM_2 + 2)
      0000D3 8D 82            [24]  537 	mov	dpl,r5
      0000D5 8E 83            [24]  538 	mov	dph,r6
      0000D7 8F F0            [24]  539 	mov	b,r7
      0000D9 E4               [12]  540 	clr	a
      0000DA 12r00r00         [24]  541 	lcall	__gptrput
                                    542 ;	.\src\main.c:69: array[1] = 0x0A;
      0000DD 04               [12]  543 	inc	a
      0000DE 2D               [12]  544 	add	a,r5
      0000DF FA               [12]  545 	mov	r2,a
      0000E0 E4               [12]  546 	clr	a
      0000E1 3E               [12]  547 	addc	a,r6
      0000E2 FB               [12]  548 	mov	r3,a
      0000E3 8F 04            [24]  549 	mov	ar4,r7
      0000E5 8A 82            [24]  550 	mov	dpl,r2
      0000E7 8B 83            [24]  551 	mov	dph,r3
      0000E9 8C F0            [24]  552 	mov	b,r4
      0000EB 74 0A            [12]  553 	mov	a,#0x0a
      0000ED 12r00r00         [24]  554 	lcall	__gptrput
                                    555 ;	.\src\main.c:70: array[2] = 0x0A;
      0000F0 74 02            [12]  556 	mov	a,#0x02
      0000F2 2D               [12]  557 	add	a,r5
      0000F3 FD               [12]  558 	mov	r5,a
      0000F4 E4               [12]  559 	clr	a
      0000F5 3E               [12]  560 	addc	a,r6
      0000F6 FE               [12]  561 	mov	r6,a
      0000F7 8D 82            [24]  562 	mov	dpl,r5
      0000F9 8E 83            [24]  563 	mov	dph,r6
      0000FB 8F F0            [24]  564 	mov	b,r7
      0000FD 74 0A            [12]  565 	mov	a,#0x0a
                                    566 ;	.\src\main.c:71: break;
      0000FF 02r00r00         [24]  567 	ljmp	__gptrput
                                    568 ;	.\src\main.c:72: case 4:
      000102                        569 00105$:
                                    570 ;	.\src\main.c:73: array[0] = 0x00;
      000102 AD*00            [24]  571 	mov	r5,_setData_PARM_2
      000104 AE*01            [24]  572 	mov	r6,(_setData_PARM_2 + 1)
      000106 AF*02            [24]  573 	mov	r7,(_setData_PARM_2 + 2)
      000108 8D 82            [24]  574 	mov	dpl,r5
      00010A 8E 83            [24]  575 	mov	dph,r6
      00010C 8F F0            [24]  576 	mov	b,r7
      00010E E4               [12]  577 	clr	a
      00010F 12r00r00         [24]  578 	lcall	__gptrput
                                    579 ;	.\src\main.c:74: array[1] = 0x1B;
      000112 04               [12]  580 	inc	a
      000113 2D               [12]  581 	add	a,r5
      000114 FA               [12]  582 	mov	r2,a
      000115 E4               [12]  583 	clr	a
      000116 3E               [12]  584 	addc	a,r6
      000117 FB               [12]  585 	mov	r3,a
      000118 8F 04            [24]  586 	mov	ar4,r7
      00011A 8A 82            [24]  587 	mov	dpl,r2
      00011C 8B 83            [24]  588 	mov	dph,r3
      00011E 8C F0            [24]  589 	mov	b,r4
      000120 74 1B            [12]  590 	mov	a,#0x1b
      000122 12r00r00         [24]  591 	lcall	__gptrput
                                    592 ;	.\src\main.c:75: array[2] = 0x18;
      000125 74 02            [12]  593 	mov	a,#0x02
      000127 2D               [12]  594 	add	a,r5
      000128 FD               [12]  595 	mov	r5,a
      000129 E4               [12]  596 	clr	a
      00012A 3E               [12]  597 	addc	a,r6
      00012B FE               [12]  598 	mov	r6,a
      00012C 8D 82            [24]  599 	mov	dpl,r5
      00012E 8E 83            [24]  600 	mov	dph,r6
      000130 8F F0            [24]  601 	mov	b,r7
      000132 74 18            [12]  602 	mov	a,#0x18
                                    603 ;	.\src\main.c:76: break;
      000134 02r00r00         [24]  604 	ljmp	__gptrput
                                    605 ;	.\src\main.c:77: case 5:
      000137                        606 00106$:
                                    607 ;	.\src\main.c:78: array[0] = 0x02;
      000137 AD*00            [24]  608 	mov	r5,_setData_PARM_2
      000139 AE*01            [24]  609 	mov	r6,(_setData_PARM_2 + 1)
      00013B AF*02            [24]  610 	mov	r7,(_setData_PARM_2 + 2)
      00013D 8D 82            [24]  611 	mov	dpl,r5
      00013F 8E 83            [24]  612 	mov	dph,r6
      000141 8F F0            [24]  613 	mov	b,r7
      000143 74 02            [12]  614 	mov	a,#0x02
      000145 12r00r00         [24]  615 	lcall	__gptrput
                                    616 ;	.\src\main.c:79: array[1] = 0x0A;
      000148 14               [12]  617 	dec	a
      000149 2D               [12]  618 	add	a,r5
      00014A FA               [12]  619 	mov	r2,a
      00014B E4               [12]  620 	clr	a
      00014C 3E               [12]  621 	addc	a,r6
      00014D FB               [12]  622 	mov	r3,a
      00014E 8F 04            [24]  623 	mov	ar4,r7
      000150 8A 82            [24]  624 	mov	dpl,r2
      000152 8B 83            [24]  625 	mov	dph,r3
      000154 8C F0            [24]  626 	mov	b,r4
      000156 74 0A            [12]  627 	mov	a,#0x0a
      000158 12r00r00         [24]  628 	lcall	__gptrput
                                    629 ;	.\src\main.c:80: array[2] = 0x08;
      00015B 74 02            [12]  630 	mov	a,#0x02
      00015D 2D               [12]  631 	add	a,r5
      00015E FD               [12]  632 	mov	r5,a
      00015F E4               [12]  633 	clr	a
      000160 3E               [12]  634 	addc	a,r6
      000161 FE               [12]  635 	mov	r6,a
      000162 8D 82            [24]  636 	mov	dpl,r5
      000164 8E 83            [24]  637 	mov	dph,r6
      000166 8F F0            [24]  638 	mov	b,r7
      000168 74 08            [12]  639 	mov	a,#0x08
                                    640 ;	.\src\main.c:81: break;
      00016A 02r00r00         [24]  641 	ljmp	__gptrput
                                    642 ;	.\src\main.c:82: case 6:
      00016D                        643 00107$:
                                    644 ;	.\src\main.c:83: array[0] = 0x02;
      00016D AD*00            [24]  645 	mov	r5,_setData_PARM_2
      00016F AE*01            [24]  646 	mov	r6,(_setData_PARM_2 + 1)
      000171 AF*02            [24]  647 	mov	r7,(_setData_PARM_2 + 2)
      000173 8D 82            [24]  648 	mov	dpl,r5
      000175 8E 83            [24]  649 	mov	dph,r6
      000177 8F F0            [24]  650 	mov	b,r7
      000179 74 02            [12]  651 	mov	a,#0x02
      00017B 12r00r00         [24]  652 	lcall	__gptrput
                                    653 ;	.\src\main.c:84: array[1] = 0x0A;
      00017E 14               [12]  654 	dec	a
      00017F 2D               [12]  655 	add	a,r5
      000180 FA               [12]  656 	mov	r2,a
      000181 E4               [12]  657 	clr	a
      000182 3E               [12]  658 	addc	a,r6
      000183 FB               [12]  659 	mov	r3,a
      000184 8F 04            [24]  660 	mov	ar4,r7
      000186 8A 82            [24]  661 	mov	dpl,r2
      000188 8B 83            [24]  662 	mov	dph,r3
      00018A 8C F0            [24]  663 	mov	b,r4
      00018C 74 0A            [12]  664 	mov	a,#0x0a
      00018E 12r00r00         [24]  665 	lcall	__gptrput
                                    666 ;	.\src\main.c:85: array[2] = 0x00;
      000191 74 02            [12]  667 	mov	a,#0x02
      000193 2D               [12]  668 	add	a,r5
      000194 FD               [12]  669 	mov	r5,a
      000195 E4               [12]  670 	clr	a
      000196 3E               [12]  671 	addc	a,r6
      000197 FE               [12]  672 	mov	r6,a
      000198 8D 82            [24]  673 	mov	dpl,r5
      00019A 8E 83            [24]  674 	mov	dph,r6
      00019C 8F F0            [24]  675 	mov	b,r7
      00019E E4               [12]  676 	clr	a
                                    677 ;	.\src\main.c:86: break;
      00019F 02r00r00         [24]  678 	ljmp	__gptrput
                                    679 ;	.\src\main.c:87: case 7:
      0001A2                        680 00108$:
                                    681 ;	.\src\main.c:88: array[0] = 0x1C;
      0001A2 AD*00            [24]  682 	mov	r5,_setData_PARM_2
      0001A4 AE*01            [24]  683 	mov	r6,(_setData_PARM_2 + 1)
      0001A6 AF*02            [24]  684 	mov	r7,(_setData_PARM_2 + 2)
      0001A8 8D 82            [24]  685 	mov	dpl,r5
      0001AA 8E 83            [24]  686 	mov	dph,r6
      0001AC 8F F0            [24]  687 	mov	b,r7
      0001AE 74 1C            [12]  688 	mov	a,#0x1c
      0001B0 12r00r00         [24]  689 	lcall	__gptrput
                                    690 ;	.\src\main.c:89: array[1] = 0x1A;
      0001B3 74 01            [12]  691 	mov	a,#0x01
      0001B5 2D               [12]  692 	add	a,r5
      0001B6 FA               [12]  693 	mov	r2,a
      0001B7 E4               [12]  694 	clr	a
      0001B8 3E               [12]  695 	addc	a,r6
      0001B9 FB               [12]  696 	mov	r3,a
      0001BA 8F 04            [24]  697 	mov	ar4,r7
      0001BC 8A 82            [24]  698 	mov	dpl,r2
      0001BE 8B 83            [24]  699 	mov	dph,r3
      0001C0 8C F0            [24]  700 	mov	b,r4
      0001C2 74 1A            [12]  701 	mov	a,#0x1a
      0001C4 12r00r00         [24]  702 	lcall	__gptrput
                                    703 ;	.\src\main.c:90: array[2] = 0x06;
      0001C7 74 02            [12]  704 	mov	a,#0x02
      0001C9 2D               [12]  705 	add	a,r5
      0001CA FD               [12]  706 	mov	r5,a
      0001CB E4               [12]  707 	clr	a
      0001CC 3E               [12]  708 	addc	a,r6
      0001CD FE               [12]  709 	mov	r6,a
      0001CE 8D 82            [24]  710 	mov	dpl,r5
      0001D0 8E 83            [24]  711 	mov	dph,r6
      0001D2 8F F0            [24]  712 	mov	b,r7
      0001D4 74 06            [12]  713 	mov	a,#0x06
                                    714 ;	.\src\main.c:91: break;
                                    715 ;	.\src\main.c:92: case 8:
      0001D6 02r00r00         [24]  716 	ljmp	__gptrput
      0001D9                        717 00109$:
                                    718 ;	.\src\main.c:93: array[0] = 0x00;
      0001D9 AD*00            [24]  719 	mov	r5,_setData_PARM_2
      0001DB AE*01            [24]  720 	mov	r6,(_setData_PARM_2 + 1)
      0001DD AF*02            [24]  721 	mov	r7,(_setData_PARM_2 + 2)
      0001DF 8D 82            [24]  722 	mov	dpl,r5
      0001E1 8E 83            [24]  723 	mov	dph,r6
      0001E3 8F F0            [24]  724 	mov	b,r7
      0001E5 E4               [12]  725 	clr	a
      0001E6 12r00r00         [24]  726 	lcall	__gptrput
                                    727 ;	.\src\main.c:94: array[1] = 0x0A;
      0001E9 04               [12]  728 	inc	a
      0001EA 2D               [12]  729 	add	a,r5
      0001EB FA               [12]  730 	mov	r2,a
      0001EC E4               [12]  731 	clr	a
      0001ED 3E               [12]  732 	addc	a,r6
      0001EE FB               [12]  733 	mov	r3,a
      0001EF 8F 04            [24]  734 	mov	ar4,r7
      0001F1 8A 82            [24]  735 	mov	dpl,r2
      0001F3 8B 83            [24]  736 	mov	dph,r3
      0001F5 8C F0            [24]  737 	mov	b,r4
      0001F7 74 0A            [12]  738 	mov	a,#0x0a
      0001F9 12r00r00         [24]  739 	lcall	__gptrput
                                    740 ;	.\src\main.c:95: array[2] = 0x00;
      0001FC 74 02            [12]  741 	mov	a,#0x02
      0001FE 2D               [12]  742 	add	a,r5
      0001FF FD               [12]  743 	mov	r5,a
      000200 E4               [12]  744 	clr	a
      000201 3E               [12]  745 	addc	a,r6
      000202 FE               [12]  746 	mov	r6,a
      000203 8D 82            [24]  747 	mov	dpl,r5
      000205 8E 83            [24]  748 	mov	dph,r6
      000207 8F F0            [24]  749 	mov	b,r7
      000209 E4               [12]  750 	clr	a
                                    751 ;	.\src\main.c:96: break;
                                    752 ;	.\src\main.c:97: case 9:
      00020A 02r00r00         [24]  753 	ljmp	__gptrput
      00020D                        754 00110$:
                                    755 ;	.\src\main.c:98: array[0] = 0x00;
      00020D AD*00            [24]  756 	mov	r5,_setData_PARM_2
      00020F AE*01            [24]  757 	mov	r6,(_setData_PARM_2 + 1)
      000211 AF*02            [24]  758 	mov	r7,(_setData_PARM_2 + 2)
      000213 8D 82            [24]  759 	mov	dpl,r5
      000215 8E 83            [24]  760 	mov	dph,r6
      000217 8F F0            [24]  761 	mov	b,r7
      000219 E4               [12]  762 	clr	a
      00021A 12r00r00         [24]  763 	lcall	__gptrput
                                    764 ;	.\src\main.c:99: array[1] = 0x0A;
      00021D 04               [12]  765 	inc	a
      00021E 2D               [12]  766 	add	a,r5
      00021F FA               [12]  767 	mov	r2,a
      000220 E4               [12]  768 	clr	a
      000221 3E               [12]  769 	addc	a,r6
      000222 FB               [12]  770 	mov	r3,a
      000223 8F 04            [24]  771 	mov	ar4,r7
      000225 8A 82            [24]  772 	mov	dpl,r2
      000227 8B 83            [24]  773 	mov	dph,r3
      000229 8C F0            [24]  774 	mov	b,r4
      00022B 74 0A            [12]  775 	mov	a,#0x0a
      00022D 12r00r00         [24]  776 	lcall	__gptrput
                                    777 ;	.\src\main.c:100: array[2] = 0x08;
      000230 74 02            [12]  778 	mov	a,#0x02
      000232 2D               [12]  779 	add	a,r5
      000233 FD               [12]  780 	mov	r5,a
      000234 E4               [12]  781 	clr	a
      000235 3E               [12]  782 	addc	a,r6
      000236 FE               [12]  783 	mov	r6,a
      000237 8D 82            [24]  784 	mov	dpl,r5
      000239 8E 83            [24]  785 	mov	dph,r6
      00023B 8F F0            [24]  786 	mov	b,r7
      00023D 74 08            [12]  787 	mov	a,#0x08
                                    788 ;	.\src\main.c:102: }
                                    789 ;	.\src\main.c:103: }
      00023F 02r00r00         [24]  790 	ljmp	__gptrput
                                    791 ;------------------------------------------------------------
                                    792 ;Allocation info for local variables in function 'nextColumn'
                                    793 ;------------------------------------------------------------
                                    794 ;	.\src\main.c:106: void nextColumn(void)
                                    795 ;	-----------------------------------------
                                    796 ;	 function nextColumn
                                    797 ;	-----------------------------------------
      000242                        798 _nextColumn:
                                    799 ;	.\src\main.c:111: if (ptrColumn < 3)
      000242 74 FD            [12]  800 	mov	a,#0x100 - 0x03
      000244 25*02            [12]  801 	add	a,_ptrColumn
      000246 40 11            [24]  802 	jc	00102$
                                    803 ;	.\src\main.c:112: P1 = (ptrColumn << 5) | second[ptrColumn];
      000248 E5*02            [12]  804 	mov	a,_ptrColumn
      00024A C4               [12]  805 	swap	a
      00024B 23               [12]  806 	rl	a
      00024C 54 E0            [12]  807 	anl	a,#0xe0
      00024E FF               [12]  808 	mov	r7,a
      00024F E5*02            [12]  809 	mov	a,_ptrColumn
      000251 24r0A            [12]  810 	add	a,#_second
      000253 F9               [12]  811 	mov	r1,a
      000254 E7               [12]  812 	mov	a,@r1
      000255 FE               [12]  813 	mov	r6,a
      000256 4F               [12]  814 	orl	a,r7
      000257 F5 90            [12]  815 	mov	_P1,a
      000259                        816 00102$:
                                    817 ;	.\src\main.c:114: if (ptrColumn == 3)
      000259 74 03            [12]  818 	mov	a,#0x03
      00025B B5*02 0C         [24]  819 	cjne	a,_ptrColumn,00104$
                                    820 ;	.\src\main.c:115: P1 = (ptrColumn << 5) | 0x1F;
      00025E E5*02            [12]  821 	mov	a,_ptrColumn
      000260 C4               [12]  822 	swap	a
      000261 23               [12]  823 	rl	a
      000262 54 E0            [12]  824 	anl	a,#0xe0
      000264 FF               [12]  825 	mov	r7,a
      000265 74 1F            [12]  826 	mov	a,#0x1f
      000267 4F               [12]  827 	orl	a,r7
      000268 F5 90            [12]  828 	mov	_P1,a
      00026A                        829 00104$:
                                    830 ;	.\src\main.c:117: if (ptrColumn > 3 && ptrColumn < 7)
      00026A E5*02            [12]  831 	mov	a,_ptrColumn
      00026C 24 FC            [12]  832 	add	a,#0xff - 0x03
      00026E 50 19            [24]  833 	jnc	00106$
      000270 74 F9            [12]  834 	mov	a,#0x100 - 0x07
      000272 25*02            [12]  835 	add	a,_ptrColumn
      000274 40 13            [24]  836 	jc	00106$
                                    837 ;	.\src\main.c:118: P1 = (ptrColumn << 5) | first[ptrColumn - 4];
      000276 E5*02            [12]  838 	mov	a,_ptrColumn
      000278 FF               [12]  839 	mov	r7,a
      000279 C4               [12]  840 	swap	a
      00027A 23               [12]  841 	rl	a
      00027B 54 E0            [12]  842 	anl	a,#0xe0
      00027D FE               [12]  843 	mov	r6,a
      00027E EF               [12]  844 	mov	a,r7
      00027F 24 FC            [12]  845 	add	a,#0xfc
      000281 24r07            [12]  846 	add	a,#_first
      000283 F9               [12]  847 	mov	r1,a
      000284 E7               [12]  848 	mov	a,@r1
      000285 FF               [12]  849 	mov	r7,a
      000286 4E               [12]  850 	orl	a,r6
      000287 F5 90            [12]  851 	mov	_P1,a
      000289                        852 00106$:
                                    853 ;	.\src\main.c:120: ptrColumn++;
      000289 05*02            [12]  854 	inc	_ptrColumn
                                    855 ;	.\src\main.c:122: if (ptrColumn == countColumn)
      00028B 74 07            [12]  856 	mov	a,#0x07
      00028D B5*02 03         [24]  857 	cjne	a,_ptrColumn,00110$
                                    858 ;	.\src\main.c:123: ptrColumn = 0;
      000290 75*02 00         [24]  859 	mov	_ptrColumn,#0x00
      000293                        860 00110$:
                                    861 ;	.\src\main.c:124: }
      000293 22               [24]  862 	ret
                                    863 ;------------------------------------------------------------
                                    864 ;Allocation info for local variables in function 'setDigits'
                                    865 ;------------------------------------------------------------
                                    866 ;	.\src\main.c:128: void setDigits()
                                    867 ;	-----------------------------------------
                                    868 ;	 function setDigits
                                    869 ;	-----------------------------------------
      000294                        870 _setDigits:
                                    871 ;	.\src\main.c:130: switch(mode)
      000294 E5*01            [12]  872 	mov	a,_mode
      000296 24 FC            [12]  873 	add	a,#0xff - 0x03
      000298 50 01            [24]  874 	jnc	00112$
      00029A 22               [24]  875 	ret
      00029B                        876 00112$:
      00029B E5*01            [12]  877 	mov	a,_mode
      00029D 75 F0 03         [24]  878 	mov	b,#0x03
      0002A0 A4               [48]  879 	mul	ab
      0002A1 90r02rA5         [24]  880 	mov	dptr,#00113$
      0002A4 73               [24]  881 	jmp	@a+dptr
      0002A5                        882 00113$:
      0002A5 02r02rB1         [24]  883 	ljmp	00101$
      0002A8 02r02rE9         [24]  884 	ljmp	00102$
      0002AB 02r03r21         [24]  885 	ljmp	00103$
      0002AE 02r03r59         [24]  886 	ljmp	00104$
                                    887 ;	.\src\main.c:132: case 0:		
      0002B1                        888 00101$:
                                    889 ;	.\src\main.c:133: setData(time10ms/10, &first[0]);	
      0002B1 AE*03            [24]  890 	mov	r6,_time10ms
      0002B3 7F 00            [12]  891 	mov	r7,#0x00
      0002B5 75*00 0A         [24]  892 	mov	__divsint_PARM_2,#0x0a
                                    893 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      0002B8 8F*01            [24]  894 	mov	(__divsint_PARM_2 + 1),r7
      0002BA 8E 82            [24]  895 	mov	dpl,r6
      0002BC 8F 83            [24]  896 	mov	dph,r7
      0002BE 12r00r00         [24]  897 	lcall	__divsint
      0002C1 75*00r07         [24]  898 	mov	_setData_PARM_2,#_first
      0002C4 75*01 00         [24]  899 	mov	(_setData_PARM_2 + 1),#0x00
      0002C7 75*02 40         [24]  900 	mov	(_setData_PARM_2 + 2),#0x40
      0002CA 12r00r00         [24]  901 	lcall	_setData
                                    902 ;	.\src\main.c:134: setData(time10ms%10, &second[0]);
      0002CD AE*03            [24]  903 	mov	r6,_time10ms
      0002CF 7F 00            [12]  904 	mov	r7,#0x00
      0002D1 75*00 0A         [24]  905 	mov	__modsint_PARM_2,#0x0a
                                    906 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      0002D4 8F*01            [24]  907 	mov	(__modsint_PARM_2 + 1),r7
      0002D6 8E 82            [24]  908 	mov	dpl,r6
      0002D8 8F 83            [24]  909 	mov	dph,r7
      0002DA 12r00r00         [24]  910 	lcall	__modsint
      0002DD 75*00r0A         [24]  911 	mov	_setData_PARM_2,#_second
      0002E0 75*01 00         [24]  912 	mov	(_setData_PARM_2 + 1),#0x00
      0002E3 75*02 40         [24]  913 	mov	(_setData_PARM_2 + 2),#0x40
                                    914 ;	.\src\main.c:135: break;
      0002E6 02r00r00         [24]  915 	ljmp	_setData
                                    916 ;	.\src\main.c:136: case 1:
      0002E9                        917 00102$:
                                    918 ;	.\src\main.c:137: setData(timeSec/10, &first[0]);
      0002E9 AE*04            [24]  919 	mov	r6,_timeSec
      0002EB 7F 00            [12]  920 	mov	r7,#0x00
      0002ED 75*00 0A         [24]  921 	mov	__divsint_PARM_2,#0x0a
                                    922 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      0002F0 8F*01            [24]  923 	mov	(__divsint_PARM_2 + 1),r7
      0002F2 8E 82            [24]  924 	mov	dpl,r6
      0002F4 8F 83            [24]  925 	mov	dph,r7
      0002F6 12r00r00         [24]  926 	lcall	__divsint
      0002F9 75*00r07         [24]  927 	mov	_setData_PARM_2,#_first
      0002FC 75*01 00         [24]  928 	mov	(_setData_PARM_2 + 1),#0x00
      0002FF 75*02 40         [24]  929 	mov	(_setData_PARM_2 + 2),#0x40
      000302 12r00r00         [24]  930 	lcall	_setData
                                    931 ;	.\src\main.c:138: setData(timeSec%10, &second[0]);
      000305 AE*04            [24]  932 	mov	r6,_timeSec
      000307 7F 00            [12]  933 	mov	r7,#0x00
      000309 75*00 0A         [24]  934 	mov	__modsint_PARM_2,#0x0a
                                    935 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      00030C 8F*01            [24]  936 	mov	(__modsint_PARM_2 + 1),r7
      00030E 8E 82            [24]  937 	mov	dpl,r6
      000310 8F 83            [24]  938 	mov	dph,r7
      000312 12r00r00         [24]  939 	lcall	__modsint
      000315 75*00r0A         [24]  940 	mov	_setData_PARM_2,#_second
      000318 75*01 00         [24]  941 	mov	(_setData_PARM_2 + 1),#0x00
      00031B 75*02 40         [24]  942 	mov	(_setData_PARM_2 + 2),#0x40
                                    943 ;	.\src\main.c:139: break;
      00031E 02r00r00         [24]  944 	ljmp	_setData
                                    945 ;	.\src\main.c:140: case 2:
      000321                        946 00103$:
                                    947 ;	.\src\main.c:141: setData(timeMin/10, &first[0]);
      000321 AE*05            [24]  948 	mov	r6,_timeMin
      000323 7F 00            [12]  949 	mov	r7,#0x00
      000325 75*00 0A         [24]  950 	mov	__divsint_PARM_2,#0x0a
                                    951 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000328 8F*01            [24]  952 	mov	(__divsint_PARM_2 + 1),r7
      00032A 8E 82            [24]  953 	mov	dpl,r6
      00032C 8F 83            [24]  954 	mov	dph,r7
      00032E 12r00r00         [24]  955 	lcall	__divsint
      000331 75*00r07         [24]  956 	mov	_setData_PARM_2,#_first
      000334 75*01 00         [24]  957 	mov	(_setData_PARM_2 + 1),#0x00
      000337 75*02 40         [24]  958 	mov	(_setData_PARM_2 + 2),#0x40
      00033A 12r00r00         [24]  959 	lcall	_setData
                                    960 ;	.\src\main.c:142: setData(timeMin%10, &second[0]);
      00033D AE*05            [24]  961 	mov	r6,_timeMin
      00033F 7F 00            [12]  962 	mov	r7,#0x00
      000341 75*00 0A         [24]  963 	mov	__modsint_PARM_2,#0x0a
                                    964 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      000344 8F*01            [24]  965 	mov	(__modsint_PARM_2 + 1),r7
      000346 8E 82            [24]  966 	mov	dpl,r6
      000348 8F 83            [24]  967 	mov	dph,r7
      00034A 12r00r00         [24]  968 	lcall	__modsint
      00034D 75*00r0A         [24]  969 	mov	_setData_PARM_2,#_second
      000350 75*01 00         [24]  970 	mov	(_setData_PARM_2 + 1),#0x00
      000353 75*02 40         [24]  971 	mov	(_setData_PARM_2 + 2),#0x40
                                    972 ;	.\src\main.c:143: break;
                                    973 ;	.\src\main.c:144: case 3:
      000356 02r00r00         [24]  974 	ljmp	_setData
      000359                        975 00104$:
                                    976 ;	.\src\main.c:145: setData(timeHour/10, &first[0]);
      000359 AE*06            [24]  977 	mov	r6,_timeHour
      00035B 7F 00            [12]  978 	mov	r7,#0x00
      00035D 75*00 0A         [24]  979 	mov	__divsint_PARM_2,#0x0a
                                    980 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000360 8F*01            [24]  981 	mov	(__divsint_PARM_2 + 1),r7
      000362 8E 82            [24]  982 	mov	dpl,r6
      000364 8F 83            [24]  983 	mov	dph,r7
      000366 12r00r00         [24]  984 	lcall	__divsint
      000369 75*00r07         [24]  985 	mov	_setData_PARM_2,#_first
      00036C 75*01 00         [24]  986 	mov	(_setData_PARM_2 + 1),#0x00
      00036F 75*02 40         [24]  987 	mov	(_setData_PARM_2 + 2),#0x40
      000372 12r00r00         [24]  988 	lcall	_setData
                                    989 ;	.\src\main.c:146: setData(timeHour%10, &second[0]);			
      000375 AE*06            [24]  990 	mov	r6,_timeHour
      000377 7F 00            [12]  991 	mov	r7,#0x00
      000379 75*00 0A         [24]  992 	mov	__modsint_PARM_2,#0x0a
                                    993 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      00037C 8F*01            [24]  994 	mov	(__modsint_PARM_2 + 1),r7
      00037E 8E 82            [24]  995 	mov	dpl,r6
      000380 8F 83            [24]  996 	mov	dph,r7
      000382 12r00r00         [24]  997 	lcall	__modsint
      000385 75*00r0A         [24]  998 	mov	_setData_PARM_2,#_second
      000388 75*01 00         [24]  999 	mov	(_setData_PARM_2 + 1),#0x00
      00038B 75*02 40         [24] 1000 	mov	(_setData_PARM_2 + 2),#0x40
                                   1001 ;	.\src\main.c:148: }
                                   1002 ;	.\src\main.c:149: }
      00038E 02r00r00         [24] 1003 	ljmp	_setData
                                   1004 ;------------------------------------------------------------
                                   1005 ;Allocation info for local variables in function 'T0init'
                                   1006 ;------------------------------------------------------------
                                   1007 ;	.\src\main.c:152: void T0init(void)
                                   1008 ;	-----------------------------------------
                                   1009 ;	 function T0init
                                   1010 ;	-----------------------------------------
      000391                       1011 _T0init:
                                   1012 ;	.\src\main.c:154: TR0=0;
                                   1013 ;	assignBit
      000391 C2 8C            [12] 1014 	clr	_TR0
                                   1015 ;	.\src\main.c:155: TMOD=(TMOD&0xf0)|0x1;
      000393 E5 89            [12] 1016 	mov	a,_TMOD
      000395 54 F0            [12] 1017 	anl	a,#0xf0
      000397 44 01            [12] 1018 	orl	a,#0x01
      000399 F5 89            [12] 1019 	mov	_TMOD,a
                                   1020 ;	.\src\main.c:156: TL0=(~tik);
      00039B 75 8A EF         [24] 1021 	mov	_TL0,#0xef
                                   1022 ;	.\src\main.c:157: TH0=(~tik)>>8;
      00039E 75 8C D8         [24] 1023 	mov	_TH0,#0xd8
                                   1024 ;	.\src\main.c:158: TR0=1;
                                   1025 ;	assignBit
      0003A1 D2 8C            [12] 1026 	setb	_TR0
                                   1027 ;	.\src\main.c:159: ET0=1; 
                                   1028 ;	assignBit
      0003A3 D2 A9            [12] 1029 	setb	_ET0
                                   1030 ;	.\src\main.c:160: EA=1;
                                   1031 ;	assignBit
      0003A5 D2 AF            [12] 1032 	setb	_EA
                                   1033 ;	.\src\main.c:161: }
      0003A7 22               [24] 1034 	ret
                                   1035 ;------------------------------------------------------------
                                   1036 ;Allocation info for local variables in function 'T0_int'
                                   1037 ;------------------------------------------------------------
                                   1038 ;	.\src\main.c:164: void T0_int (void) __interrupt (TF0_VECTOR)
                                   1039 ;	-----------------------------------------
                                   1040 ;	 function T0_int
                                   1041 ;	-----------------------------------------
      0003A8                       1042 _T0_int:
      0003A8 C0*00            [24] 1043 	push	bits
      0003AA C0 E0            [24] 1044 	push	acc
      0003AC C0 F0            [24] 1045 	push	b
      0003AE C0 82            [24] 1046 	push	dpl
      0003B0 C0 83            [24] 1047 	push	dph
      0003B2 C0 07            [24] 1048 	push	(0+7)
      0003B4 C0 06            [24] 1049 	push	(0+6)
      0003B6 C0 05            [24] 1050 	push	(0+5)
      0003B8 C0 04            [24] 1051 	push	(0+4)
      0003BA C0 03            [24] 1052 	push	(0+3)
      0003BC C0 02            [24] 1053 	push	(0+2)
      0003BE C0 01            [24] 1054 	push	(0+1)
      0003C0 C0 00            [24] 1055 	push	(0+0)
      0003C2 C0 D0            [24] 1056 	push	psw
      0003C4 75 D0 00         [24] 1057 	mov	psw,#0x00
                                   1058 ;	.\src\main.c:166: TR0=0;
                                   1059 ;	assignBit
      0003C7 C2 8C            [12] 1060 	clr	_TR0
                                   1061 ;	.\src\main.c:167: TL0=(~tik);
      0003C9 75 8A EF         [24] 1062 	mov	_TL0,#0xef
                                   1063 ;	.\src\main.c:168: TH0=(~tik)>>8;
      0003CC 75 8C D8         [24] 1064 	mov	_TH0,#0xd8
                                   1065 ;	.\src\main.c:169: TR0=1;
                                   1066 ;	assignBit
      0003CF D2 8C            [12] 1067 	setb	_TR0
                                   1068 ;	.\src\main.c:170: if (started) 
      0003D1 E5*00            [12] 1069 	mov	a,_started
      0003D3 60 2B            [24] 1070 	jz	00111$
                                   1071 ;	.\src\main.c:172: time10ms++;
      0003D5 05*03            [12] 1072 	inc	_time10ms
                                   1073 ;	.\src\main.c:173: if (time10ms == 100) 
      0003D7 74 64            [12] 1074 	mov	a,#0x64
      0003D9 B5*03 21         [24] 1075 	cjne	a,_time10ms,00108$
                                   1076 ;	.\src\main.c:175: time10ms = 0;
      0003DC 75*03 00         [24] 1077 	mov	_time10ms,#0x00
                                   1078 ;	.\src\main.c:176: timeSec++;
      0003DF 05*04            [12] 1079 	inc	_timeSec
                                   1080 ;	.\src\main.c:177: if (timeSec == 60) 
      0003E1 74 3C            [12] 1081 	mov	a,#0x3c
      0003E3 B5*04 17         [24] 1082 	cjne	a,_timeSec,00108$
                                   1083 ;	.\src\main.c:179: timeSec = 0;
      0003E6 75*04 00         [24] 1084 	mov	_timeSec,#0x00
                                   1085 ;	.\src\main.c:180: timeMin++;
      0003E9 05*05            [12] 1086 	inc	_timeMin
                                   1087 ;	.\src\main.c:181: if (timeMin == 60) 
      0003EB 74 3C            [12] 1088 	mov	a,#0x3c
      0003ED B5*05 0D         [24] 1089 	cjne	a,_timeMin,00108$
                                   1090 ;	.\src\main.c:183: timeMin = 0;
      0003F0 75*05 00         [24] 1091 	mov	_timeMin,#0x00
                                   1092 ;	.\src\main.c:184: timeHour++;
      0003F3 05*06            [12] 1093 	inc	_timeHour
                                   1094 ;	.\src\main.c:185: if (timeHour == 24)
      0003F5 74 18            [12] 1095 	mov	a,#0x18
      0003F7 B5*06 03         [24] 1096 	cjne	a,_timeHour,00108$
                                   1097 ;	.\src\main.c:186: timeHour = 0;
      0003FA 75*06 00         [24] 1098 	mov	_timeHour,#0x00
      0003FD                       1099 00108$:
                                   1100 ;	.\src\main.c:190: setDigits();
      0003FD 12r02r94         [24] 1101 	lcall	_setDigits
      000400                       1102 00111$:
                                   1103 ;	.\src\main.c:192: }
      000400 D0 D0            [24] 1104 	pop	psw
      000402 D0 00            [24] 1105 	pop	(0+0)
      000404 D0 01            [24] 1106 	pop	(0+1)
      000406 D0 02            [24] 1107 	pop	(0+2)
      000408 D0 03            [24] 1108 	pop	(0+3)
      00040A D0 04            [24] 1109 	pop	(0+4)
      00040C D0 05            [24] 1110 	pop	(0+5)
      00040E D0 06            [24] 1111 	pop	(0+6)
      000410 D0 07            [24] 1112 	pop	(0+7)
      000412 D0 83            [24] 1113 	pop	dph
      000414 D0 82            [24] 1114 	pop	dpl
      000416 D0 F0            [24] 1115 	pop	b
      000418 D0 E0            [24] 1116 	pop	acc
      00041A D0*00            [24] 1117 	pop	bits
      00041C 32               [24] 1118 	reti
                                   1119 ;------------------------------------------------------------
                                   1120 ;Allocation info for local variables in function 'delayFOR'
                                   1121 ;------------------------------------------------------------
                                   1122 ;kodF                      Allocated to registers r7 
                                   1123 ;ml                        Allocated to registers r6 
                                   1124 ;------------------------------------------------------------
                                   1125 ;	.\src\main.c:195: void delayFOR(unsigned char kodF)
                                   1126 ;	-----------------------------------------
                                   1127 ;	 function delayFOR
                                   1128 ;	-----------------------------------------
      00041D                       1129 _delayFOR:
      00041D AF 82            [24] 1130 	mov	r7,dpl
                                   1131 ;	.\src\main.c:198: for(ml = 0; ml < kodF; ml++){}
      00041F 7E 00            [12] 1132 	mov	r6,#0x00
      000421                       1133 00103$:
      000421 C3               [12] 1134 	clr	c
      000422 EE               [12] 1135 	mov	a,r6
      000423 9F               [12] 1136 	subb	a,r7
      000424 50 03            [24] 1137 	jnc	00105$
      000426 0E               [12] 1138 	inc	r6
      000427 80 F8            [24] 1139 	sjmp	00103$
      000429                       1140 00105$:
                                   1141 ;	.\src\main.c:199: }
      000429 22               [24] 1142 	ret
                                   1143 ;------------------------------------------------------------
                                   1144 ;Allocation info for local variables in function 'DelayMS'
                                   1145 ;------------------------------------------------------------
                                   1146 ;KodMS                     Allocated to registers 
                                   1147 ;------------------------------------------------------------
                                   1148 ;	.\src\main.c:202: void DelayMS(unsigned char KodMS)
                                   1149 ;	-----------------------------------------
                                   1150 ;	 function DelayMS
                                   1151 ;	-----------------------------------------
      00042A                       1152 _DelayMS:
      00042A AF 82            [24] 1153 	mov	r7,dpl
                                   1154 ;	.\src\main.c:204: do delay1ms;
      00042C                       1155 00101$:
      00042C 75 82 63         [24] 1156 	mov	dpl,#0x63
      00042F C0 07            [24] 1157 	push	ar7
      000431 12r04r1D         [24] 1158 	lcall	_delayFOR
      000434 D0 07            [24] 1159 	pop	ar7
                                   1160 ;	.\src\main.c:205: while(--KodMS);
      000436 DF F4            [24] 1161 	djnz	r7,00101$
                                   1162 ;	.\src\main.c:206: }
      000438 22               [24] 1163 	ret
                                   1164 ;------------------------------------------------------------
                                   1165 ;Allocation info for local variables in function 'buttonsCheck'
                                   1166 ;------------------------------------------------------------
                                   1167 ;	.\src\main.c:209: void buttonsCheck(void)
                                   1168 ;	-----------------------------------------
                                   1169 ;	 function buttonsCheck
                                   1170 ;	-----------------------------------------
      000439                       1171 _buttonsCheck:
                                   1172 ;	.\src\main.c:212: if (!P3_2) 
      000439 20 B2 1E         [24] 1173 	jb	_P3_2,00108$
                                   1174 ;	.\src\main.c:215: P1 = 0x1F;
      00043C 75 90 1F         [24] 1175 	mov	_P1,#0x1f
                                   1176 ;	.\src\main.c:217: DelayMS(10);
      00043F 75 82 0A         [24] 1177 	mov	dpl,#0x0a
      000442 12r04r2A         [24] 1178 	lcall	_DelayMS
                                   1179 ;	.\src\main.c:219: while(!P3_2);
      000445                       1180 00101$:
      000445 30 B2 FD         [24] 1181 	jnb	_P3_2,00101$
                                   1182 ;	.\src\main.c:221: DelayMS(10);
      000448 75 82 0A         [24] 1183 	mov	dpl,#0x0a
      00044B 12r04r2A         [24] 1184 	lcall	_DelayMS
                                   1185 ;	.\src\main.c:223: if (started)
      00044E E5*00            [12] 1186 	mov	a,_started
      000450 60 05            [24] 1187 	jz	00105$
                                   1188 ;	.\src\main.c:225: started = 0;
      000452 75*00 00         [24] 1189 	mov	_started,#0x00
      000455 80 03            [24] 1190 	sjmp	00108$
      000457                       1191 00105$:
                                   1192 ;	.\src\main.c:228: started = 1;
      000457 75*00 01         [24] 1193 	mov	_started,#0x01
      00045A                       1194 00108$:
                                   1195 ;	.\src\main.c:232: if (!P3_3) 
      00045A 20 B3 1F         [24] 1196 	jb	_P3_3,00115$
                                   1197 ;	.\src\main.c:235: P1 = 0x1F;
      00045D 75 90 1F         [24] 1198 	mov	_P1,#0x1f
                                   1199 ;	.\src\main.c:237: DelayMS(10);
      000460 75 82 0A         [24] 1200 	mov	dpl,#0x0a
      000463 12r04r2A         [24] 1201 	lcall	_DelayMS
                                   1202 ;	.\src\main.c:239: while(!P3_3);
      000466                       1203 00109$:
      000466 30 B3 FD         [24] 1204 	jnb	_P3_3,00109$
                                   1205 ;	.\src\main.c:241: DelayMS(10);
      000469 75 82 0A         [24] 1206 	mov	dpl,#0x0a
      00046C 12r04r2A         [24] 1207 	lcall	_DelayMS
                                   1208 ;	.\src\main.c:243: mode++;
      00046F 05*01            [12] 1209 	inc	_mode
                                   1210 ;	.\src\main.c:244: if (mode == 4)
      000471 74 04            [12] 1211 	mov	a,#0x04
      000473 B5*01 03         [24] 1212 	cjne	a,_mode,00113$
                                   1213 ;	.\src\main.c:245: mode = 0;
      000476 75*01 00         [24] 1214 	mov	_mode,#0x00
      000479                       1215 00113$:
                                   1216 ;	.\src\main.c:247: setDigits();
      000479 12r02r94         [24] 1217 	lcall	_setDigits
      00047C                       1218 00115$:
                                   1219 ;	.\src\main.c:250: if (!P3_4)
      00047C 20 B4 1B         [24] 1220 	jb	_P3_4,00118$
                                   1221 ;	.\src\main.c:253: DelayMS(10);
      00047F 75 82 0A         [24] 1222 	mov	dpl,#0x0a
      000482 12r04r2A         [24] 1223 	lcall	_DelayMS
                                   1224 ;	.\src\main.c:254: time10ms=0;
      000485 75*03 00         [24] 1225 	mov	_time10ms,#0x00
                                   1226 ;	.\src\main.c:256: timeSec = 0;
      000488 75*04 00         [24] 1227 	mov	_timeSec,#0x00
                                   1228 ;	.\src\main.c:258: timeMin = 0;
      00048B 75*05 00         [24] 1229 	mov	_timeMin,#0x00
                                   1230 ;	.\src\main.c:260: timeHour = 0;
      00048E 75*06 00         [24] 1231 	mov	_timeHour,#0x00
                                   1232 ;	.\src\main.c:261: DelayMS(10);
      000491 75 82 0A         [24] 1233 	mov	dpl,#0x0a
      000494 12r04r2A         [24] 1234 	lcall	_DelayMS
                                   1235 ;	.\src\main.c:262: setDigits();
                                   1236 ;	.\src\main.c:264: }
      000497 02r02r94         [24] 1237 	ljmp	_setDigits
      00049A                       1238 00118$:
      00049A 22               [24] 1239 	ret
                                   1240 ;------------------------------------------------------------
                                   1241 ;Allocation info for local variables in function 'main'
                                   1242 ;------------------------------------------------------------
                                   1243 ;	.\src\main.c:266: void main(void){
                                   1244 ;	-----------------------------------------
                                   1245 ;	 function main
                                   1246 ;	-----------------------------------------
      00049B                       1247 _main:
                                   1248 ;	.\src\main.c:268: T0init();
      00049B 12r03r91         [24] 1249 	lcall	_T0init
                                   1250 ;	.\src\main.c:270: setDigits();
      00049E 12r02r94         [24] 1251 	lcall	_setDigits
                                   1252 ;	.\src\main.c:271: while(1){
      0004A1                       1253 00102$:
                                   1254 ;	.\src\main.c:273: buttonsCheck();
      0004A1 12r04r39         [24] 1255 	lcall	_buttonsCheck
                                   1256 ;	.\src\main.c:275: delayFOR(10);
      0004A4 75 82 0A         [24] 1257 	mov	dpl,#0x0a
      0004A7 12r04r1D         [24] 1258 	lcall	_delayFOR
                                   1259 ;	.\src\main.c:277: nextColumn();
      0004AA 12r02r42         [24] 1260 	lcall	_nextColumn
                                   1261 ;	.\src\main.c:279: }
      0004AD 80 F2            [24] 1262 	sjmp	00102$
                                   1263 	.area CSEG    (CODE)
                                   1264 	.area CONST   (CODE)
                                   1265 	.area XINIT   (CODE)
                                   1266 	.area CABS    (ABS,CODE)
